
USB PD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  080060b4  080060b4  000070b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006144  08006144  00008010  2**0
                  CONTENTS
  4 .ARM          00000000  08006144  08006144  00008010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006144  08006144  00008010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006144  08006144  00007144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006148  08006148  00007148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800614c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a30  20000010  0800615c  00008010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a40  0800615c  00008a40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001beb1  00000000  00000000  00008040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003be8  00000000  00000000  00023ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ad0  00000000  00000000  00027ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014c4  00000000  00000000  000295b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000039d3  00000000  00000000  0002aa74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d918  00000000  00000000  0002e447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4c44  00000000  00000000  0004bd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001109a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072d0  00000000  00000000  001109e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00117cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800609c 	.word	0x0800609c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	0800609c 	.word	0x0800609c

080001d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d4:	f000 faf5 	bl	80007c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d8:	f000 f81a 	bl	8000210 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001dc:	f000 f914 	bl	8000408 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001e0:	f000 f85c 	bl	800029c <MX_ADC1_Init>
  MX_I2C1_Init();
 80001e4:	f000 f8d0 	bl	8000388 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001e8:	f003 f99e 	bl	8003528 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001ec:	4a05      	ldr	r2, [pc, #20]	@ (8000204 <main+0x34>)
 80001ee:	2100      	movs	r1, #0
 80001f0:	4805      	ldr	r0, [pc, #20]	@ (8000208 <main+0x38>)
 80001f2:	f003 f9e3 	bl	80035bc <osThreadNew>
 80001f6:	4603      	mov	r3, r0
 80001f8:	4a04      	ldr	r2, [pc, #16]	@ (800020c <main+0x3c>)
 80001fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001fc:	f003 f9b8 	bl	8003570 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000200:	bf00      	nop
 8000202:	e7fd      	b.n	8000200 <main+0x30>
 8000204:	080060d8 	.word	0x080060d8
 8000208:	08000451 	.word	0x08000451
 800020c:	200000e4 	.word	0x200000e4

08000210 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b096      	sub	sp, #88	@ 0x58
 8000214:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000216:	f107 0314 	add.w	r3, r7, #20
 800021a:	2244      	movs	r2, #68	@ 0x44
 800021c:	2100      	movs	r1, #0
 800021e:	4618      	mov	r0, r3
 8000220:	f005 ff02 	bl	8006028 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000224:	463b      	mov	r3, r7
 8000226:	2200      	movs	r2, #0
 8000228:	601a      	str	r2, [r3, #0]
 800022a:	605a      	str	r2, [r3, #4]
 800022c:	609a      	str	r2, [r3, #8]
 800022e:	60da      	str	r2, [r3, #12]
 8000230:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000232:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000236:	f001 fe41 	bl	8001ebc <HAL_PWREx_ControlVoltageScaling>
 800023a:	4603      	mov	r3, r0
 800023c:	2b00      	cmp	r3, #0
 800023e:	d001      	beq.n	8000244 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000240:	f000 f920 	bl	8000484 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000244:	2310      	movs	r3, #16
 8000246:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000248:	2301      	movs	r3, #1
 800024a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800024c:	2300      	movs	r3, #0
 800024e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000250:	2360      	movs	r3, #96	@ 0x60
 8000252:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000254:	2300      	movs	r3, #0
 8000256:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000258:	f107 0314 	add.w	r3, r7, #20
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fe83 	bl	8001f68 <HAL_RCC_OscConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000268:	f000 f90c 	bl	8000484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026c:	230f      	movs	r3, #15
 800026e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000270:	2300      	movs	r3, #0
 8000272:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000274:	2300      	movs	r3, #0
 8000276:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000280:	463b      	mov	r3, r7
 8000282:	2100      	movs	r1, #0
 8000284:	4618      	mov	r0, r3
 8000286:	f002 fad1 	bl	800282c <HAL_RCC_ClockConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000290:	f000 f8f8 	bl	8000484 <Error_Handler>
  }
}
 8000294:	bf00      	nop
 8000296:	3758      	adds	r7, #88	@ 0x58
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b08a      	sub	sp, #40	@ 0x28
 80002a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002a2:	f107 031c 	add.w	r3, r7, #28
 80002a6:	2200      	movs	r2, #0
 80002a8:	601a      	str	r2, [r3, #0]
 80002aa:	605a      	str	r2, [r3, #4]
 80002ac:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2200      	movs	r2, #0
 80002b2:	601a      	str	r2, [r3, #0]
 80002b4:	605a      	str	r2, [r3, #4]
 80002b6:	609a      	str	r2, [r3, #8]
 80002b8:	60da      	str	r2, [r3, #12]
 80002ba:	611a      	str	r2, [r3, #16]
 80002bc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002be:	4b2f      	ldr	r3, [pc, #188]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002c0:	4a2f      	ldr	r2, [pc, #188]	@ (8000380 <MX_ADC1_Init+0xe4>)
 80002c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002c4:	4b2d      	ldr	r3, [pc, #180]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ca:	4b2c      	ldr	r3, [pc, #176]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002d0:	4b2a      	ldr	r3, [pc, #168]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002d2:	2200      	movs	r2, #0
 80002d4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002d6:	4b29      	ldr	r3, [pc, #164]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002dc:	4b27      	ldr	r3, [pc, #156]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002de:	2204      	movs	r2, #4
 80002e0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002e2:	4b26      	ldr	r3, [pc, #152]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002e8:	4b24      	ldr	r3, [pc, #144]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80002ee:	4b23      	ldr	r3, [pc, #140]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002f0:	2201      	movs	r2, #1
 80002f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002f4:	4b21      	ldr	r3, [pc, #132]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002fc:	4b1f      	ldr	r3, [pc, #124]	@ (800037c <MX_ADC1_Init+0xe0>)
 80002fe:	2200      	movs	r2, #0
 8000300:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000302:	4b1e      	ldr	r3, [pc, #120]	@ (800037c <MX_ADC1_Init+0xe0>)
 8000304:	2200      	movs	r2, #0
 8000306:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000308:	4b1c      	ldr	r3, [pc, #112]	@ (800037c <MX_ADC1_Init+0xe0>)
 800030a:	2200      	movs	r2, #0
 800030c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000310:	4b1a      	ldr	r3, [pc, #104]	@ (800037c <MX_ADC1_Init+0xe0>)
 8000312:	2200      	movs	r2, #0
 8000314:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000316:	4b19      	ldr	r3, [pc, #100]	@ (800037c <MX_ADC1_Init+0xe0>)
 8000318:	2200      	movs	r2, #0
 800031a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800031e:	4817      	ldr	r0, [pc, #92]	@ (800037c <MX_ADC1_Init+0xe0>)
 8000320:	f000 fc28 	bl	8000b74 <HAL_ADC_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800032a:	f000 f8ab 	bl	8000484 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000332:	f107 031c 	add.w	r3, r7, #28
 8000336:	4619      	mov	r1, r3
 8000338:	4810      	ldr	r0, [pc, #64]	@ (800037c <MX_ADC1_Init+0xe0>)
 800033a:	f001 f987 	bl	800164c <HAL_ADCEx_MultiModeConfigChannel>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000344:	f000 f89e 	bl	8000484 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000348:	4b0e      	ldr	r3, [pc, #56]	@ (8000384 <MX_ADC1_Init+0xe8>)
 800034a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800034c:	2306      	movs	r3, #6
 800034e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000350:	2300      	movs	r3, #0
 8000352:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000354:	237f      	movs	r3, #127	@ 0x7f
 8000356:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000358:	2304      	movs	r3, #4
 800035a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800035c:	2300      	movs	r3, #0
 800035e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000360:	1d3b      	adds	r3, r7, #4
 8000362:	4619      	mov	r1, r3
 8000364:	4805      	ldr	r0, [pc, #20]	@ (800037c <MX_ADC1_Init+0xe0>)
 8000366:	f000 fd4f 	bl	8000e08 <HAL_ADC_ConfigChannel>
 800036a:	4603      	mov	r3, r0
 800036c:	2b00      	cmp	r3, #0
 800036e:	d001      	beq.n	8000374 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000370:	f000 f888 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000374:	bf00      	nop
 8000376:	3728      	adds	r7, #40	@ 0x28
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	2000002c 	.word	0x2000002c
 8000380:	50040000 	.word	0x50040000
 8000384:	14f00020 	.word	0x14f00020

08000388 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800038c:	4b1b      	ldr	r3, [pc, #108]	@ (80003fc <MX_I2C1_Init+0x74>)
 800038e:	4a1c      	ldr	r2, [pc, #112]	@ (8000400 <MX_I2C1_Init+0x78>)
 8000390:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 8000392:	4b1a      	ldr	r3, [pc, #104]	@ (80003fc <MX_I2C1_Init+0x74>)
 8000394:	4a1b      	ldr	r2, [pc, #108]	@ (8000404 <MX_I2C1_Init+0x7c>)
 8000396:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000398:	4b18      	ldr	r3, [pc, #96]	@ (80003fc <MX_I2C1_Init+0x74>)
 800039a:	2200      	movs	r2, #0
 800039c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800039e:	4b17      	ldr	r3, [pc, #92]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003a0:	2201      	movs	r2, #1
 80003a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80003a4:	4b15      	ldr	r3, [pc, #84]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80003aa:	4b14      	ldr	r3, [pc, #80]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80003b0:	4b12      	ldr	r3, [pc, #72]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80003b6:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003b8:	2200      	movs	r2, #0
 80003ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003be:	2200      	movs	r2, #0
 80003c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003c2:	480e      	ldr	r0, [pc, #56]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003c4:	f001 fc3a 	bl	8001c3c <HAL_I2C_Init>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80003ce:	f000 f859 	bl	8000484 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80003d2:	2100      	movs	r1, #0
 80003d4:	4809      	ldr	r0, [pc, #36]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003d6:	f001 fccc 	bl	8001d72 <HAL_I2CEx_ConfigAnalogFilter>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003e0:	f000 f850 	bl	8000484 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003e4:	2100      	movs	r1, #0
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_I2C1_Init+0x74>)
 80003e8:	f001 fd0e 	bl	8001e08 <HAL_I2CEx_ConfigDigitalFilter>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003f2:	f000 f847 	bl	8000484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	20000090 	.word	0x20000090
 8000400:	40005400 	.word	0x40005400
 8000404:	00100d14 	.word	0x00100d14

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800040e:	4b0f      	ldr	r3, [pc, #60]	@ (800044c <MX_GPIO_Init+0x44>)
 8000410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000412:	4a0e      	ldr	r2, [pc, #56]	@ (800044c <MX_GPIO_Init+0x44>)
 8000414:	f043 0301 	orr.w	r3, r3, #1
 8000418:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800041a:	4b0c      	ldr	r3, [pc, #48]	@ (800044c <MX_GPIO_Init+0x44>)
 800041c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800041e:	f003 0301 	and.w	r3, r3, #1
 8000422:	607b      	str	r3, [r7, #4]
 8000424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000426:	4b09      	ldr	r3, [pc, #36]	@ (800044c <MX_GPIO_Init+0x44>)
 8000428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800042a:	4a08      	ldr	r2, [pc, #32]	@ (800044c <MX_GPIO_Init+0x44>)
 800042c:	f043 0302 	orr.w	r3, r3, #2
 8000430:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000432:	4b06      	ldr	r3, [pc, #24]	@ (800044c <MX_GPIO_Init+0x44>)
 8000434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000436:	f003 0302 	and.w	r3, r3, #2
 800043a:	603b      	str	r3, [r7, #0]
 800043c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800043e:	bf00      	nop
 8000440:	370c      	adds	r7, #12
 8000442:	46bd      	mov	sp, r7
 8000444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000448:	4770      	bx	lr
 800044a:	bf00      	nop
 800044c:	40021000 	.word	0x40021000

08000450 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000458:	2001      	movs	r0, #1
 800045a:	f003 f941 	bl	80036e0 <osDelay>
 800045e:	e7fb      	b.n	8000458 <StartDefaultTask+0x8>

08000460 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b082      	sub	sp, #8
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a04      	ldr	r2, [pc, #16]	@ (8000480 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800046e:	4293      	cmp	r3, r2
 8000470:	d101      	bne.n	8000476 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000472:	f000 f9bf 	bl	80007f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}
 800047e:	bf00      	nop
 8000480:	40001000 	.word	0x40001000

08000484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000488:	b672      	cpsid	i
}
 800048a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800048c:	bf00      	nop
 800048e:	e7fd      	b.n	800048c <Error_Handler+0x8>

08000490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000496:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <HAL_MspInit+0x4c>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800049a:	4a10      	ldr	r2, [pc, #64]	@ (80004dc <HAL_MspInit+0x4c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	6613      	str	r3, [r2, #96]	@ 0x60
 80004a2:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <HAL_MspInit+0x4c>)
 80004a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80004a6:	f003 0301 	and.w	r3, r3, #1
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <HAL_MspInit+0x4c>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004b2:	4a0a      	ldr	r2, [pc, #40]	@ (80004dc <HAL_MspInit+0x4c>)
 80004b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80004ba:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <HAL_MspInit+0x4c>)
 80004bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	210f      	movs	r1, #15
 80004ca:	f06f 0001 	mvn.w	r0, #1
 80004ce:	f001 fa19 	bl	8001904 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40021000 	.word	0x40021000

080004e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08a      	sub	sp, #40	@ 0x28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e8:	f107 0314 	add.w	r3, r7, #20
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
 80004f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <HAL_ADC_MspInit+0x74>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d124      	bne.n	800054c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000502:	4b15      	ldr	r3, [pc, #84]	@ (8000558 <HAL_ADC_MspInit+0x78>)
 8000504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000506:	4a14      	ldr	r2, [pc, #80]	@ (8000558 <HAL_ADC_MspInit+0x78>)
 8000508:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800050c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800050e:	4b12      	ldr	r3, [pc, #72]	@ (8000558 <HAL_ADC_MspInit+0x78>)
 8000510:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000512:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000516:	613b      	str	r3, [r7, #16]
 8000518:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051a:	4b0f      	ldr	r3, [pc, #60]	@ (8000558 <HAL_ADC_MspInit+0x78>)
 800051c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800051e:	4a0e      	ldr	r2, [pc, #56]	@ (8000558 <HAL_ADC_MspInit+0x78>)
 8000520:	f043 0301 	orr.w	r3, r3, #1
 8000524:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <HAL_ADC_MspInit+0x78>)
 8000528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800052a:	f003 0301 	and.w	r3, r3, #1
 800052e:	60fb      	str	r3, [r7, #12]
 8000530:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN9
    PA5     ------> ADC1_IN10
    PA6     ------> ADC1_IN11
    PA7     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000532:	23ff      	movs	r3, #255	@ 0xff
 8000534:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000536:	230b      	movs	r3, #11
 8000538:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800053e:	f107 0314 	add.w	r3, r7, #20
 8000542:	4619      	mov	r1, r3
 8000544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000548:	f001 fa06 	bl	8001958 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800054c:	bf00      	nop
 800054e:	3728      	adds	r7, #40	@ 0x28
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	50040000 	.word	0x50040000
 8000558:	40021000 	.word	0x40021000

0800055c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	@ 0x58
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000574:	f107 0310 	add.w	r3, r7, #16
 8000578:	2234      	movs	r2, #52	@ 0x34
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f005 fd53 	bl	8006028 <memset>
  if(hi2c->Instance==I2C1)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a1f      	ldr	r2, [pc, #124]	@ (8000604 <HAL_I2C_MspInit+0xa8>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d137      	bne.n	80005fc <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800058c:	2340      	movs	r3, #64	@ 0x40
 800058e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000590:	2300      	movs	r3, #0
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	4618      	mov	r0, r3
 800059a:	f002 fb87 	bl	8002cac <HAL_RCCEx_PeriphCLKConfig>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80005a4:	f7ff ff6e 	bl	8000484 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a8:	4b17      	ldr	r3, [pc, #92]	@ (8000608 <HAL_I2C_MspInit+0xac>)
 80005aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ac:	4a16      	ldr	r2, [pc, #88]	@ (8000608 <HAL_I2C_MspInit+0xac>)
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005b4:	4b14      	ldr	r3, [pc, #80]	@ (8000608 <HAL_I2C_MspInit+0xac>)
 80005b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b8:	f003 0301 	and.w	r3, r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80005c0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80005c4:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005c6:	2312      	movs	r3, #18
 80005c8:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ce:	2303      	movs	r3, #3
 80005d0:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80005d2:	2304      	movs	r3, #4
 80005d4:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005d6:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80005da:	4619      	mov	r1, r3
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005e0:	f001 f9ba 	bl	8001958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <HAL_I2C_MspInit+0xac>)
 80005e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005e8:	4a07      	ldr	r2, [pc, #28]	@ (8000608 <HAL_I2C_MspInit+0xac>)
 80005ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <HAL_I2C_MspInit+0xac>)
 80005f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80005f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80005fc:	bf00      	nop
 80005fe:	3758      	adds	r7, #88	@ 0x58
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40005400 	.word	0x40005400
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b08e      	sub	sp, #56	@ 0x38
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8000614:	2300      	movs	r3, #0
 8000616:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800061a:	4b34      	ldr	r3, [pc, #208]	@ (80006ec <HAL_InitTick+0xe0>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800061e:	4a33      	ldr	r2, [pc, #204]	@ (80006ec <HAL_InitTick+0xe0>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	6593      	str	r3, [r2, #88]	@ 0x58
 8000626:	4b31      	ldr	r3, [pc, #196]	@ (80006ec <HAL_InitTick+0xe0>)
 8000628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000632:	f107 0210 	add.w	r2, r7, #16
 8000636:	f107 0314 	add.w	r3, r7, #20
 800063a:	4611      	mov	r1, r2
 800063c:	4618      	mov	r0, r3
 800063e:	f002 faa3 	bl	8002b88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000642:	6a3b      	ldr	r3, [r7, #32]
 8000644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000648:	2b00      	cmp	r3, #0
 800064a:	d103      	bne.n	8000654 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800064c:	f002 fa86 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8000650:	6378      	str	r0, [r7, #52]	@ 0x34
 8000652:	e004      	b.n	800065e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000654:	f002 fa82 	bl	8002b5c <HAL_RCC_GetPCLK1Freq>
 8000658:	4603      	mov	r3, r0
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800065e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000660:	4a23      	ldr	r2, [pc, #140]	@ (80006f0 <HAL_InitTick+0xe4>)
 8000662:	fba2 2303 	umull	r2, r3, r2, r3
 8000666:	0c9b      	lsrs	r3, r3, #18
 8000668:	3b01      	subs	r3, #1
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800066c:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <HAL_InitTick+0xe8>)
 800066e:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <HAL_InitTick+0xec>)
 8000670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000672:	4b20      	ldr	r3, [pc, #128]	@ (80006f4 <HAL_InitTick+0xe8>)
 8000674:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000678:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800067a:	4a1e      	ldr	r2, [pc, #120]	@ (80006f4 <HAL_InitTick+0xe8>)
 800067c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800067e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <HAL_InitTick+0xe8>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000686:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <HAL_InitTick+0xe8>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <HAL_InitTick+0xe8>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000692:	4818      	ldr	r0, [pc, #96]	@ (80006f4 <HAL_InitTick+0xe8>)
 8000694:	f002 fc90 	bl	8002fb8 <HAL_TIM_Base_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800069e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d11b      	bne.n	80006de <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80006a6:	4813      	ldr	r0, [pc, #76]	@ (80006f4 <HAL_InitTick+0xe8>)
 80006a8:	f002 fce8 	bl	800307c <HAL_TIM_Base_Start_IT>
 80006ac:	4603      	mov	r3, r0
 80006ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80006b2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d111      	bne.n	80006de <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80006ba:	2036      	movs	r0, #54	@ 0x36
 80006bc:	f001 f93e 	bl	800193c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b0f      	cmp	r3, #15
 80006c4:	d808      	bhi.n	80006d8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80006c6:	2200      	movs	r2, #0
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	2036      	movs	r0, #54	@ 0x36
 80006cc:	f001 f91a 	bl	8001904 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006d0:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <HAL_InitTick+0xf0>)
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	6013      	str	r3, [r2, #0]
 80006d6:	e002      	b.n	80006de <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80006d8:	2301      	movs	r3, #1
 80006da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80006de:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80006e2:	4618      	mov	r0, r3
 80006e4:	3738      	adds	r7, #56	@ 0x38
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000
 80006f0:	431bde83 	.word	0x431bde83
 80006f4:	200000e8 	.word	0x200000e8
 80006f8:	40001000 	.word	0x40001000
 80006fc:	20000004 	.word	0x20000004

08000700 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <NMI_Handler+0x4>

08000708 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	bf00      	nop
 8000716:	e7fd      	b.n	8000714 <MemManage_Handler+0x4>

08000718 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <BusFault_Handler+0x4>

08000720 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <UsageFault_Handler+0x4>

08000728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <TIM6_IRQHandler+0x10>)
 800073e:	f002 fcf1 	bl	8003124 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200000e8 	.word	0x200000e8

0800074c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000750:	4b06      	ldr	r3, [pc, #24]	@ (800076c <SystemInit+0x20>)
 8000752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000756:	4a05      	ldr	r2, [pc, #20]	@ (800076c <SystemInit+0x20>)
 8000758:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800075c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	e000ed00 	.word	0xe000ed00

08000770 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000770:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80007a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000774:	f7ff ffea 	bl	800074c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000778:	480c      	ldr	r0, [pc, #48]	@ (80007ac <LoopForever+0x6>)
  ldr r1, =_edata
 800077a:	490d      	ldr	r1, [pc, #52]	@ (80007b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800077c:	4a0d      	ldr	r2, [pc, #52]	@ (80007b4 <LoopForever+0xe>)
  movs r3, #0
 800077e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000780:	e002      	b.n	8000788 <LoopCopyDataInit>

08000782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000786:	3304      	adds	r3, #4

08000788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800078a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800078c:	d3f9      	bcc.n	8000782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800078e:	4a0a      	ldr	r2, [pc, #40]	@ (80007b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000790:	4c0a      	ldr	r4, [pc, #40]	@ (80007bc <LoopForever+0x16>)
  movs r3, #0
 8000792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000794:	e001      	b.n	800079a <LoopFillZerobss>

08000796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000798:	3204      	adds	r2, #4

0800079a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800079a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800079c:	d3fb      	bcc.n	8000796 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800079e:	f005 fc4b 	bl	8006038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007a2:	f7ff fd15 	bl	80001d0 <main>

080007a6 <LoopForever>:

LoopForever:
    b LoopForever
 80007a6:	e7fe      	b.n	80007a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007a8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80007ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007b4:	0800614c 	.word	0x0800614c
  ldr r2, =_sbss
 80007b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007bc:	20001a40 	.word	0x20001a40

080007c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007c0:	e7fe      	b.n	80007c0 <ADC1_2_IRQHandler>

080007c2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007cc:	2003      	movs	r0, #3
 80007ce:	f001 f88e 	bl	80018ee <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007d2:	200f      	movs	r0, #15
 80007d4:	f7ff ff1a 	bl	800060c <HAL_InitTick>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	71fb      	strb	r3, [r7, #7]
 80007e2:	e001      	b.n	80007e8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007e4:	f7ff fe54 	bl	8000490 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007e8:	79fb      	ldrb	r3, [r7, #7]
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
	...

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000134 	.word	0x20000134

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000134 	.word	0x20000134

08000834 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	431a      	orrs	r2, r3
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	609a      	str	r2, [r3, #8]
}
 800084e:	bf00      	nop
 8000850:	370c      	adds	r7, #12
 8000852:	46bd      	mov	sp, r7
 8000854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000858:	4770      	bx	lr

0800085a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800085a:	b480      	push	{r7}
 800085c:	b083      	sub	sp, #12
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	431a      	orrs	r2, r3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	609a      	str	r2, [r3, #8]
}
 8000874:	bf00      	nop
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689b      	ldr	r3, [r3, #8]
 800088c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000890:	4618      	mov	r0, r3
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800089c:	b480      	push	{r7}
 800089e:	b087      	sub	sp, #28
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	3360      	adds	r3, #96	@ 0x60
 80008ae:	461a      	mov	r2, r3
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	4b08      	ldr	r3, [pc, #32]	@ (80008e0 <LL_ADC_SetOffset+0x44>)
 80008be:	4013      	ands	r3, r2
 80008c0:	687a      	ldr	r2, [r7, #4]
 80008c2:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80008c6:	683a      	ldr	r2, [r7, #0]
 80008c8:	430a      	orrs	r2, r1
 80008ca:	4313      	orrs	r3, r2
 80008cc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80008d4:	bf00      	nop
 80008d6:	371c      	adds	r7, #28
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	03fff000 	.word	0x03fff000

080008e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
 80008ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	3360      	adds	r3, #96	@ 0x60
 80008f2:	461a      	mov	r2, r3
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	4413      	add	r3, r2
 80008fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8000904:	4618      	mov	r0, r3
 8000906:	3714      	adds	r7, #20
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8000910:	b480      	push	{r7}
 8000912:	b087      	sub	sp, #28
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	3360      	adds	r3, #96	@ 0x60
 8000920:	461a      	mov	r2, r3
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	4413      	add	r3, r2
 8000928:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	431a      	orrs	r2, r3
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800093a:	bf00      	nop
 800093c:	371c      	adds	r7, #28
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	695b      	ldr	r3, [r3, #20]
 8000954:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	431a      	orrs	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	615a      	str	r2, [r3, #20]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800096c:	b480      	push	{r7}
 800096e:	b087      	sub	sp, #28
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	3330      	adds	r3, #48	@ 0x30
 800097c:	461a      	mov	r2, r3
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	0a1b      	lsrs	r3, r3, #8
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	f003 030c 	and.w	r3, r3, #12
 8000988:	4413      	add	r3, r2
 800098a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	f003 031f 	and.w	r3, r3, #31
 8000996:	211f      	movs	r1, #31
 8000998:	fa01 f303 	lsl.w	r3, r1, r3
 800099c:	43db      	mvns	r3, r3
 800099e:	401a      	ands	r2, r3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	0e9b      	lsrs	r3, r3, #26
 80009a4:	f003 011f 	and.w	r1, r3, #31
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	f003 031f 	and.w	r3, r3, #31
 80009ae:	fa01 f303 	lsl.w	r3, r1, r3
 80009b2:	431a      	orrs	r2, r3
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80009b8:	bf00      	nop
 80009ba:	371c      	adds	r7, #28
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3314      	adds	r3, #20
 80009d4:	461a      	mov	r2, r3
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	0e5b      	lsrs	r3, r3, #25
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	f003 0304 	and.w	r3, r3, #4
 80009e0:	4413      	add	r3, r2
 80009e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80009e4:	697b      	ldr	r3, [r7, #20]
 80009e6:	681a      	ldr	r2, [r3, #0]
 80009e8:	68bb      	ldr	r3, [r7, #8]
 80009ea:	0d1b      	lsrs	r3, r3, #20
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	2107      	movs	r1, #7
 80009f2:	fa01 f303 	lsl.w	r3, r1, r3
 80009f6:	43db      	mvns	r3, r3
 80009f8:	401a      	ands	r2, r3
 80009fa:	68bb      	ldr	r3, [r7, #8]
 80009fc:	0d1b      	lsrs	r3, r3, #20
 80009fe:	f003 031f 	and.w	r3, r3, #31
 8000a02:	6879      	ldr	r1, [r7, #4]
 8000a04:	fa01 f303 	lsl.w	r3, r1, r3
 8000a08:	431a      	orrs	r2, r3
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000a0e:	bf00      	nop
 8000a10:	371c      	adds	r7, #28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	60f8      	str	r0, [r7, #12]
 8000a24:	60b9      	str	r1, [r7, #8]
 8000a26:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a34:	43db      	mvns	r3, r3
 8000a36:	401a      	ands	r2, r3
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0318 	and.w	r3, r3, #24
 8000a3e:	4908      	ldr	r1, [pc, #32]	@ (8000a60 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000a40:	40d9      	lsrs	r1, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	400b      	ands	r3, r1
 8000a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000a4a:	431a      	orrs	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8000a52:	bf00      	nop
 8000a54:	3714      	adds	r7, #20
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	0007ffff 	.word	0x0007ffff

08000a64 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	689b      	ldr	r3, [r3, #8]
 8000a70:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8000a74:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000a78:	687a      	ldr	r2, [r7, #4]
 8000a7a:	6093      	str	r3, [r2, #8]
}
 8000a7c:	bf00      	nop
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	689b      	ldr	r3, [r3, #8]
 8000a94:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a98:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a9c:	d101      	bne.n	8000aa2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	e000      	b.n	8000aa4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8000ac0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000ac4:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000acc:	bf00      	nop
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	689b      	ldr	r3, [r3, #8]
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ae8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8000aec:	d101      	bne.n	8000af2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8000aee:	2301      	movs	r3, #1
 8000af0:	e000      	b.n	8000af4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	370c      	adds	r7, #12
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	2b01      	cmp	r3, #1
 8000b12:	d101      	bne.n	8000b18 <LL_ADC_IsEnabled+0x18>
 8000b14:	2301      	movs	r3, #1
 8000b16:	e000      	b.n	8000b1a <LL_ADC_IsEnabled+0x1a>
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b26:	b480      	push	{r7}
 8000b28:	b083      	sub	sp, #12
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	2b04      	cmp	r3, #4
 8000b38:	d101      	bne.n	8000b3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e000      	b.n	8000b40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000b3e:	2300      	movs	r3, #0
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	689b      	ldr	r3, [r3, #8]
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	d101      	bne.n	8000b64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
	...

08000b74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000b74:	b590      	push	{r4, r7, lr}
 8000b76:	b089      	sub	sp, #36	@ 0x24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e12b      	b.n	8000de6 <HAL_ADC_Init+0x272>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	691b      	ldr	r3, [r3, #16]
 8000b92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d109      	bne.n	8000bb0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff fc9f 	bl	80004e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff67 	bl	8000a88 <LL_ADC_IsDeepPowerDownEnabled>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d004      	beq.n	8000bca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff ff4d 	bl	8000a64 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff ff82 	bl	8000ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d115      	bne.n	8000c06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff66 	bl	8000ab0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000be4:	4b82      	ldr	r3, [pc, #520]	@ (8000df0 <HAL_ADC_Init+0x27c>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	099b      	lsrs	r3, r3, #6
 8000bea:	4a82      	ldr	r2, [pc, #520]	@ (8000df4 <HAL_ADC_Init+0x280>)
 8000bec:	fba2 2303 	umull	r2, r3, r2, r3
 8000bf0:	099b      	lsrs	r3, r3, #6
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000bf8:	e002      	b.n	8000c00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	3b01      	subs	r3, #1
 8000bfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d1f9      	bne.n	8000bfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff ff64 	bl	8000ad8 <LL_ADC_IsInternalRegulatorEnabled>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d10d      	bne.n	8000c32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c1a:	f043 0210 	orr.w	r2, r3, #16
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c26:	f043 0201 	orr.w	r2, r3, #1
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff75 	bl	8000b26 <LL_ADC_REG_IsConversionOngoing>
 8000c3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c42:	f003 0310 	and.w	r3, r3, #16
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f040 80c4 	bne.w	8000dd4 <HAL_ADC_Init+0x260>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	f040 80c0 	bne.w	8000dd4 <HAL_ADC_Init+0x260>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c58:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000c5c:	f043 0202 	orr.w	r2, r3, #2
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ff49 	bl	8000b00 <LL_ADC_IsEnabled>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d110      	bne.n	8000c96 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8000c74:	4860      	ldr	r0, [pc, #384]	@ (8000df8 <HAL_ADC_Init+0x284>)
 8000c76:	f7ff ff43 	bl	8000b00 <LL_ADC_IsEnabled>
 8000c7a:	4604      	mov	r4, r0
 8000c7c:	485f      	ldr	r0, [pc, #380]	@ (8000dfc <HAL_ADC_Init+0x288>)
 8000c7e:	f7ff ff3f 	bl	8000b00 <LL_ADC_IsEnabled>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4323      	orrs	r3, r4
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d105      	bne.n	8000c96 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	485b      	ldr	r0, [pc, #364]	@ (8000e00 <HAL_ADC_Init+0x28c>)
 8000c92:	f7ff fdcf 	bl	8000834 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7e5b      	ldrb	r3, [r3, #25]
 8000c9a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000ca0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8000ca6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8000cac:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cb4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d106      	bne.n	8000cd2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	69ba      	ldr	r2, [r7, #24]
 8000cce:	4313      	orrs	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d009      	beq.n	8000cee <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cde:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ce6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	68da      	ldr	r2, [r3, #12]
 8000cf4:	4b43      	ldr	r3, [pc, #268]	@ (8000e04 <HAL_ADC_Init+0x290>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	687a      	ldr	r2, [r7, #4]
 8000cfa:	6812      	ldr	r2, [r2, #0]
 8000cfc:	69b9      	ldr	r1, [r7, #24]
 8000cfe:	430b      	orrs	r3, r1
 8000d00:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4618      	mov	r0, r3
 8000d08:	f7ff ff20 	bl	8000b4c <LL_ADC_INJ_IsConversionOngoing>
 8000d0c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d13d      	bne.n	8000d90 <HAL_ADC_Init+0x21c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d13a      	bne.n	8000d90 <HAL_ADC_Init+0x21c>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d1e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000d26:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	68db      	ldr	r3, [r3, #12]
 8000d32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000d36:	f023 0302 	bic.w	r3, r3, #2
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6812      	ldr	r2, [r2, #0]
 8000d3e:	69b9      	ldr	r1, [r7, #24]
 8000d40:	430b      	orrs	r3, r1
 8000d42:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d118      	bne.n	8000d80 <HAL_ADC_Init+0x20c>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8000d58:	f023 0304 	bic.w	r3, r3, #4
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8000d64:	4311      	orrs	r1, r2
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8000d6a:	4311      	orrs	r1, r2
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8000d70:	430a      	orrs	r2, r1
 8000d72:	431a      	orrs	r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	f042 0201 	orr.w	r2, r2, #1
 8000d7c:	611a      	str	r2, [r3, #16]
 8000d7e:	e007      	b.n	8000d90 <HAL_ADC_Init+0x21c>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	691a      	ldr	r2, [r3, #16]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b01      	cmp	r3, #1
 8000d96:	d10c      	bne.n	8000db2 <HAL_ADC_Init+0x23e>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f023 010f 	bic.w	r1, r3, #15
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	69db      	ldr	r3, [r3, #28]
 8000da6:	1e5a      	subs	r2, r3, #1
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	430a      	orrs	r2, r1
 8000dae:	631a      	str	r2, [r3, #48]	@ 0x30
 8000db0:	e007      	b.n	8000dc2 <HAL_ADC_Init+0x24e>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f022 020f 	bic.w	r2, r2, #15
 8000dc0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dc6:	f023 0303 	bic.w	r3, r3, #3
 8000dca:	f043 0201 	orr.w	r2, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000dd2:	e007      	b.n	8000de4 <HAL_ADC_Init+0x270>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dd8:	f043 0210 	orr.w	r2, r3, #16
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8000de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3724      	adds	r7, #36	@ 0x24
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}
 8000dee:	bf00      	nop
 8000df0:	20000000 	.word	0x20000000
 8000df4:	053e2d63 	.word	0x053e2d63
 8000df8:	50040000 	.word	0x50040000
 8000dfc:	50040100 	.word	0x50040100
 8000e00:	50040300 	.word	0x50040300
 8000e04:	fff0c007 	.word	0xfff0c007

08000e08 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0b6      	sub	sp, #216	@ 0xd8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e12:	2300      	movs	r3, #0
 8000e14:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d101      	bne.n	8000e2a <HAL_ADC_ConfigChannel+0x22>
 8000e26:	2302      	movs	r3, #2
 8000e28:	e3d5      	b.n	80015d6 <HAL_ADC_ConfigChannel+0x7ce>
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fe75 	bl	8000b26 <LL_ADC_REG_IsConversionOngoing>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 83ba 	bne.w	80015b8 <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b05      	cmp	r3, #5
 8000e52:	d824      	bhi.n	8000e9e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	3b02      	subs	r3, #2
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d81b      	bhi.n	8000e96 <HAL_ADC_ConfigChannel+0x8e>
 8000e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8000e64 <HAL_ADC_ConfigChannel+0x5c>)
 8000e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e64:	08000e75 	.word	0x08000e75
 8000e68:	08000e7d 	.word	0x08000e7d
 8000e6c:	08000e85 	.word	0x08000e85
 8000e70:	08000e8d 	.word	0x08000e8d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8000e74:	230c      	movs	r3, #12
 8000e76:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e7a:	e010      	b.n	8000e9e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8000e7c:	2312      	movs	r3, #18
 8000e7e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e82:	e00c      	b.n	8000e9e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8000e84:	2318      	movs	r3, #24
 8000e86:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e8a:	e008      	b.n	8000e9e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8000e8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e94:	e003      	b.n	8000e9e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8000e96:	2306      	movs	r3, #6
 8000e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8000e9c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6818      	ldr	r0, [r3, #0]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8000eac:	f7ff fd5e 	bl	800096c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fe36 	bl	8000b26 <LL_ADC_REG_IsConversionOngoing>
 8000eba:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fe42 	bl	8000b4c <LL_ADC_INJ_IsConversionOngoing>
 8000ec8:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8000ecc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f040 81bf 	bne.w	8001254 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8000ed6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 81ba 	bne.w	8001254 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	689b      	ldr	r3, [r3, #8]
 8000ee4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000ee8:	d10f      	bne.n	8000f0a <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fd65 	bl	80009c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd1f 	bl	8000946 <LL_ADC_SetSamplingTimeCommonConfig>
 8000f08:	e00e      	b.n	8000f28 <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6818      	ldr	r0, [r3, #0]
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	6819      	ldr	r1, [r3, #0]
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	461a      	mov	r2, r3
 8000f18:	f7ff fd54 	bl	80009c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2100      	movs	r1, #0
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff fd0f 	bl	8000946 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	695a      	ldr	r2, [r3, #20]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	08db      	lsrs	r3, r3, #3
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	691b      	ldr	r3, [r3, #16]
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d00a      	beq.n	8000f60 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6818      	ldr	r0, [r3, #0]
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	6919      	ldr	r1, [r3, #16]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8000f5a:	f7ff fc9f 	bl	800089c <LL_ADC_SetOffset>
 8000f5e:	e179      	b.n	8001254 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	2100      	movs	r1, #0
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff fcbc 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d10a      	bne.n	8000f8c <HAL_ADC_ConfigChannel+0x184>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fcb1 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 8000f82:	4603      	mov	r3, r0
 8000f84:	0e9b      	lsrs	r3, r3, #26
 8000f86:	f003 021f 	and.w	r2, r3, #31
 8000f8a:	e01e      	b.n	8000fca <HAL_ADC_ConfigChannel+0x1c2>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fca6 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8000fa2:	fa93 f3a3 	rbit	r3, r3
 8000fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8000fae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d101      	bne.n	8000fbe <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 8000fba:	2320      	movs	r3, #32
 8000fbc:	e004      	b.n	8000fc8 <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8000fbe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000fc2:	fab3 f383 	clz	r3, r3
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <HAL_ADC_ConfigChannel+0x1da>
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	0e9b      	lsrs	r3, r3, #26
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	e018      	b.n	8001014 <HAL_ADC_ConfigChannel+0x20c>
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8000fee:	fa93 f3a3 	rbit	r3, r3
 8000ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8000ff6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8000ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8000ffe:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 8001006:	2320      	movs	r3, #32
 8001008:	e004      	b.n	8001014 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 800100a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800100e:	fab3 f383 	clz	r3, r3
 8001012:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001014:	429a      	cmp	r2, r3
 8001016:	d106      	bne.n	8001026 <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fc75 	bl	8000910 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	2101      	movs	r1, #1
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fc59 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001038:	2b00      	cmp	r3, #0
 800103a:	d10a      	bne.n	8001052 <HAL_ADC_ConfigChannel+0x24a>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2101      	movs	r1, #1
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fc4e 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 8001048:	4603      	mov	r3, r0
 800104a:	0e9b      	lsrs	r3, r3, #26
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	e01e      	b.n	8001090 <HAL_ADC_ConfigChannel+0x288>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2101      	movs	r1, #1
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fc43 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001064:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001068:	fa93 f3a3 	rbit	r3, r3
 800106c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8001070:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001074:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8001078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8001080:	2320      	movs	r3, #32
 8001082:	e004      	b.n	800108e <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8001084:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001088:	fab3 f383 	clz	r3, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001098:	2b00      	cmp	r3, #0
 800109a:	d105      	bne.n	80010a8 <HAL_ADC_ConfigChannel+0x2a0>
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0e9b      	lsrs	r3, r3, #26
 80010a2:	f003 031f 	and.w	r3, r3, #31
 80010a6:	e018      	b.n	80010da <HAL_ADC_ConfigChannel+0x2d2>
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 80010bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80010c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 80010c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 80010cc:	2320      	movs	r3, #32
 80010ce:	e004      	b.n	80010da <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 80010d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010d4:	fab3 f383 	clz	r3, r3
 80010d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80010da:	429a      	cmp	r2, r3
 80010dc:	d106      	bne.n	80010ec <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2200      	movs	r2, #0
 80010e4:	2101      	movs	r1, #1
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fc12 	bl	8000910 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2102      	movs	r1, #2
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fbf6 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d10a      	bne.n	8001118 <HAL_ADC_ConfigChannel+0x310>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2102      	movs	r1, #2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fbeb 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	0e9b      	lsrs	r3, r3, #26
 8001112:	f003 021f 	and.w	r2, r3, #31
 8001116:	e01e      	b.n	8001156 <HAL_ADC_ConfigChannel+0x34e>
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fbe0 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 8001124:	4603      	mov	r3, r0
 8001126:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800112e:	fa93 f3a3 	rbit	r3, r3
 8001132:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8001136:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800113a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 800113e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 8001146:	2320      	movs	r3, #32
 8001148:	e004      	b.n	8001154 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 800114a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800114e:	fab3 f383 	clz	r3, r3
 8001152:	b2db      	uxtb	r3, r3
 8001154:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800115e:	2b00      	cmp	r3, #0
 8001160:	d105      	bne.n	800116e <HAL_ADC_ConfigChannel+0x366>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	0e9b      	lsrs	r3, r3, #26
 8001168:	f003 031f 	and.w	r3, r3, #31
 800116c:	e014      	b.n	8001198 <HAL_ADC_ConfigChannel+0x390>
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001176:	fa93 f3a3 	rbit	r3, r3
 800117a:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 800117c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800117e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8001182:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001186:	2b00      	cmp	r3, #0
 8001188:	d101      	bne.n	800118e <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800118a:	2320      	movs	r3, #32
 800118c:	e004      	b.n	8001198 <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 800118e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001192:	fab3 f383 	clz	r3, r3
 8001196:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001198:	429a      	cmp	r2, r3
 800119a:	d106      	bne.n	80011aa <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2200      	movs	r2, #0
 80011a2:	2102      	movs	r1, #2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fbb3 	bl	8000910 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2103      	movs	r1, #3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff fb97 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 80011b6:	4603      	mov	r3, r0
 80011b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10a      	bne.n	80011d6 <HAL_ADC_ConfigChannel+0x3ce>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2103      	movs	r1, #3
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fb8c 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 80011cc:	4603      	mov	r3, r0
 80011ce:	0e9b      	lsrs	r3, r3, #26
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	e017      	b.n	8001206 <HAL_ADC_ConfigChannel+0x3fe>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	2103      	movs	r1, #3
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff fb81 	bl	80008e4 <LL_ADC_GetOffsetChannel>
 80011e2:	4603      	mov	r3, r0
 80011e4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80011e8:	fa93 f3a3 	rbit	r3, r3
 80011ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80011ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011f0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 80011f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 80011f8:	2320      	movs	r3, #32
 80011fa:	e003      	b.n	8001204 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80011fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80011fe:	fab3 f383 	clz	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800120e:	2b00      	cmp	r3, #0
 8001210:	d105      	bne.n	800121e <HAL_ADC_ConfigChannel+0x416>
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	0e9b      	lsrs	r3, r3, #26
 8001218:	f003 031f 	and.w	r3, r3, #31
 800121c:	e011      	b.n	8001242 <HAL_ADC_ConfigChannel+0x43a>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001224:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001226:	fa93 f3a3 	rbit	r3, r3
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 800122c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800122e:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8001230:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 8001236:	2320      	movs	r3, #32
 8001238:	e003      	b.n	8001242 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 800123a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001242:	429a      	cmp	r2, r3
 8001244:	d106      	bne.n	8001254 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	2103      	movs	r1, #3
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff fb5e 	bl	8000910 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff fc51 	bl	8000b00 <LL_ADC_IsEnabled>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	f040 813f 	bne.w	80014e4 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	6819      	ldr	r1, [r3, #0]
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	461a      	mov	r2, r3
 8001274:	f7ff fbd2 	bl	8000a1c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	4a8e      	ldr	r2, [pc, #568]	@ (80014b8 <HAL_ADC_ConfigChannel+0x6b0>)
 800127e:	4293      	cmp	r3, r2
 8001280:	f040 8130 	bne.w	80014e4 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10b      	bne.n	80012ac <HAL_ADC_ConfigChannel+0x4a4>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	0e9b      	lsrs	r3, r3, #26
 800129a:	3301      	adds	r3, #1
 800129c:	f003 031f 	and.w	r3, r3, #31
 80012a0:	2b09      	cmp	r3, #9
 80012a2:	bf94      	ite	ls
 80012a4:	2301      	movls	r3, #1
 80012a6:	2300      	movhi	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	e019      	b.n	80012e0 <HAL_ADC_ConfigChannel+0x4d8>
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012b4:	fa93 f3a3 	rbit	r3, r3
 80012b8:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80012ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80012be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 80012c4:	2320      	movs	r3, #32
 80012c6:	e003      	b.n	80012d0 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 80012c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80012ca:	fab3 f383 	clz	r3, r3
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	2b09      	cmp	r3, #9
 80012d8:	bf94      	ite	ls
 80012da:	2301      	movls	r3, #1
 80012dc:	2300      	movhi	r3, #0
 80012de:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d079      	beq.n	80013d8 <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d107      	bne.n	8001300 <HAL_ADC_ConfigChannel+0x4f8>
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	0e9b      	lsrs	r3, r3, #26
 80012f6:	3301      	adds	r3, #1
 80012f8:	069b      	lsls	r3, r3, #26
 80012fa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80012fe:	e015      	b.n	800132c <HAL_ADC_ConfigChannel+0x524>
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001308:	fa93 f3a3 	rbit	r3, r3
 800130c:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800130e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001310:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001314:	2b00      	cmp	r3, #0
 8001316:	d101      	bne.n	800131c <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 8001318:	2320      	movs	r3, #32
 800131a:	e003      	b.n	8001324 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 800131c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800131e:	fab3 f383 	clz	r3, r3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	3301      	adds	r3, #1
 8001326:	069b      	lsls	r3, r3, #26
 8001328:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001334:	2b00      	cmp	r3, #0
 8001336:	d109      	bne.n	800134c <HAL_ADC_ConfigChannel+0x544>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	0e9b      	lsrs	r3, r3, #26
 800133e:	3301      	adds	r3, #1
 8001340:	f003 031f 	and.w	r3, r3, #31
 8001344:	2101      	movs	r1, #1
 8001346:	fa01 f303 	lsl.w	r3, r1, r3
 800134a:	e017      	b.n	800137c <HAL_ADC_ConfigChannel+0x574>
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001352:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001354:	fa93 f3a3 	rbit	r3, r3
 8001358:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800135a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800135c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800135e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8001364:	2320      	movs	r3, #32
 8001366:	e003      	b.n	8001370 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8001368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800136a:	fab3 f383 	clz	r3, r3
 800136e:	b2db      	uxtb	r3, r3
 8001370:	3301      	adds	r3, #1
 8001372:	f003 031f 	and.w	r3, r3, #31
 8001376:	2101      	movs	r1, #1
 8001378:	fa01 f303 	lsl.w	r3, r1, r3
 800137c:	ea42 0103 	orr.w	r1, r2, r3
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001388:	2b00      	cmp	r3, #0
 800138a:	d10a      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0x59a>
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0e9b      	lsrs	r3, r3, #26
 8001392:	3301      	adds	r3, #1
 8001394:	f003 021f 	and.w	r2, r3, #31
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	051b      	lsls	r3, r3, #20
 80013a0:	e018      	b.n	80013d4 <HAL_ADC_ConfigChannel+0x5cc>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013aa:	fa93 f3a3 	rbit	r3, r3
 80013ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80013b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80013b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80013b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 80013ba:	2320      	movs	r3, #32
 80013bc:	e003      	b.n	80013c6 <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 80013be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	3301      	adds	r3, #1
 80013c8:	f003 021f 	and.w	r2, r3, #31
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80013d4:	430b      	orrs	r3, r1
 80013d6:	e080      	b.n	80014da <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d107      	bne.n	80013f4 <HAL_ADC_ConfigChannel+0x5ec>
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	0e9b      	lsrs	r3, r3, #26
 80013ea:	3301      	adds	r3, #1
 80013ec:	069b      	lsls	r3, r3, #26
 80013ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80013f2:	e015      	b.n	8001420 <HAL_ADC_ConfigChannel+0x618>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013fc:	fa93 f3a3 	rbit	r3, r3
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 800140c:	2320      	movs	r3, #32
 800140e:	e003      	b.n	8001418 <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 8001410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	3301      	adds	r3, #1
 800141a:	069b      	lsls	r3, r3, #26
 800141c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001428:	2b00      	cmp	r3, #0
 800142a:	d109      	bne.n	8001440 <HAL_ADC_ConfigChannel+0x638>
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0e9b      	lsrs	r3, r3, #26
 8001432:	3301      	adds	r3, #1
 8001434:	f003 031f 	and.w	r3, r3, #31
 8001438:	2101      	movs	r1, #1
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	e017      	b.n	8001470 <HAL_ADC_ConfigChannel+0x668>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	fa93 f3a3 	rbit	r3, r3
 800144c:	61bb      	str	r3, [r7, #24]
  return result;
 800144e:	69bb      	ldr	r3, [r7, #24]
 8001450:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001452:	6a3b      	ldr	r3, [r7, #32]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 8001458:	2320      	movs	r3, #32
 800145a:	e003      	b.n	8001464 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 800145c:	6a3b      	ldr	r3, [r7, #32]
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	3301      	adds	r3, #1
 8001466:	f003 031f 	and.w	r3, r3, #31
 800146a:	2101      	movs	r1, #1
 800146c:	fa01 f303 	lsl.w	r3, r1, r3
 8001470:	ea42 0103 	orr.w	r1, r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800147c:	2b00      	cmp	r3, #0
 800147e:	d10d      	bne.n	800149c <HAL_ADC_ConfigChannel+0x694>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	0e9b      	lsrs	r3, r3, #26
 8001486:	3301      	adds	r3, #1
 8001488:	f003 021f 	and.w	r2, r3, #31
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	3b1e      	subs	r3, #30
 8001494:	051b      	lsls	r3, r3, #20
 8001496:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800149a:	e01d      	b.n	80014d8 <HAL_ADC_ConfigChannel+0x6d0>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	fa93 f3a3 	rbit	r3, r3
 80014a8:	60fb      	str	r3, [r7, #12]
  return result;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d103      	bne.n	80014bc <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 80014b4:	2320      	movs	r3, #32
 80014b6:	e005      	b.n	80014c4 <HAL_ADC_ConfigChannel+0x6bc>
 80014b8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fab3 f383 	clz	r3, r3
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	3301      	adds	r3, #1
 80014c6:	f003 021f 	and.w	r2, r3, #31
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	3b1e      	subs	r3, #30
 80014d2:	051b      	lsls	r3, r3, #20
 80014d4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014d8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80014da:	683a      	ldr	r2, [r7, #0]
 80014dc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80014de:	4619      	mov	r1, r3
 80014e0:	f7ff fa70 	bl	80009c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	4b3d      	ldr	r3, [pc, #244]	@ (80015e0 <HAL_ADC_ConfigChannel+0x7d8>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d06c      	beq.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014f0:	483c      	ldr	r0, [pc, #240]	@ (80015e4 <HAL_ADC_ConfigChannel+0x7dc>)
 80014f2:	f7ff f9c5 	bl	8000880 <LL_ADC_GetCommonPathInternalCh>
 80014f6:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a3a      	ldr	r2, [pc, #232]	@ (80015e8 <HAL_ADC_ConfigChannel+0x7e0>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d127      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001504:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001508:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800150c:	2b00      	cmp	r3, #0
 800150e:	d121      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a35      	ldr	r2, [pc, #212]	@ (80015ec <HAL_ADC_ConfigChannel+0x7e4>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d157      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800151a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800151e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001522:	4619      	mov	r1, r3
 8001524:	482f      	ldr	r0, [pc, #188]	@ (80015e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001526:	f7ff f998 	bl	800085a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800152a:	4b31      	ldr	r3, [pc, #196]	@ (80015f0 <HAL_ADC_ConfigChannel+0x7e8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	099b      	lsrs	r3, r3, #6
 8001530:	4a30      	ldr	r2, [pc, #192]	@ (80015f4 <HAL_ADC_ConfigChannel+0x7ec>)
 8001532:	fba2 2303 	umull	r2, r3, r2, r3
 8001536:	099b      	lsrs	r3, r3, #6
 8001538:	1c5a      	adds	r2, r3, #1
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8001544:	e002      	b.n	800154c <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3b01      	subs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f9      	bne.n	8001546 <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001552:	e03a      	b.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a27      	ldr	r2, [pc, #156]	@ (80015f8 <HAL_ADC_ConfigChannel+0x7f0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d113      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800155e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001562:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10d      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a1f      	ldr	r2, [pc, #124]	@ (80015ec <HAL_ADC_ConfigChannel+0x7e4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d12a      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001574:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001578:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800157c:	4619      	mov	r1, r3
 800157e:	4819      	ldr	r0, [pc, #100]	@ (80015e4 <HAL_ADC_ConfigChannel+0x7dc>)
 8001580:	f7ff f96b 	bl	800085a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001584:	e021      	b.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1c      	ldr	r2, [pc, #112]	@ (80015fc <HAL_ADC_ConfigChannel+0x7f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d11c      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001590:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001594:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d116      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a12      	ldr	r2, [pc, #72]	@ (80015ec <HAL_ADC_ConfigChannel+0x7e4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d111      	bne.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80015aa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015ae:	4619      	mov	r1, r3
 80015b0:	480c      	ldr	r0, [pc, #48]	@ (80015e4 <HAL_ADC_ConfigChannel+0x7dc>)
 80015b2:	f7ff f952 	bl	800085a <LL_ADC_SetCommonPathInternalCh>
 80015b6:	e008      	b.n	80015ca <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015bc:	f043 0220 	orr.w	r2, r3, #32
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80015d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	37d8      	adds	r7, #216	@ 0xd8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	80080000 	.word	0x80080000
 80015e4:	50040300 	.word	0x50040300
 80015e8:	c7520000 	.word	0xc7520000
 80015ec:	50040000 	.word	0x50040000
 80015f0:	20000000 	.word	0x20000000
 80015f4:	053e2d63 	.word	0x053e2d63
 80015f8:	cb840000 	.word	0xcb840000
 80015fc:	80000001 	.word	0x80000001

08001600 <LL_ADC_IsEnabled>:
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b01      	cmp	r3, #1
 8001612:	d101      	bne.n	8001618 <LL_ADC_IsEnabled+0x18>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LL_ADC_IsEnabled+0x1a>
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr

08001626 <LL_ADC_REG_IsConversionOngoing>:
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0304 	and.w	r3, r3, #4
 8001636:	2b04      	cmp	r3, #4
 8001638:	d101      	bne.n	800163e <LL_ADC_REG_IsConversionOngoing+0x18>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800163e:	2300      	movs	r3, #0
}
 8001640:	4618      	mov	r0, r3
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b09f      	sub	sp, #124	@ 0x7c
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001656:	2300      	movs	r3, #0
 8001658:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001662:	2b01      	cmp	r3, #1
 8001664:	d101      	bne.n	800166a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8001666:	2302      	movs	r3, #2
 8001668:	e089      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2201      	movs	r2, #1
 800166e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8001672:	2300      	movs	r3, #0
 8001674:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8001676:	2300      	movs	r3, #0
 8001678:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a42      	ldr	r2, [pc, #264]	@ (8001788 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d102      	bne.n	800168a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001684:	4b41      	ldr	r3, [pc, #260]	@ (800178c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	e001      	b.n	800168e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800168a:	2300      	movs	r3, #0
 800168c:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d10b      	bne.n	80016ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001698:	f043 0220 	orr.w	r2, r3, #32
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e068      	b.n	800177e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ffb9 	bl	8001626 <LL_ADC_REG_IsConversionOngoing>
 80016b4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7ff ffb3 	bl	8001626 <LL_ADC_REG_IsConversionOngoing>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d14a      	bne.n	800175c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80016c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d147      	bne.n	800175c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80016cc:	4b30      	ldr	r3, [pc, #192]	@ (8001790 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80016ce:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d027      	beq.n	8001728 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80016d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	6859      	ldr	r1, [r3, #4]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016ea:	035b      	lsls	r3, r3, #13
 80016ec:	430b      	orrs	r3, r1
 80016ee:	431a      	orrs	r2, r3
 80016f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80016f2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016f4:	4824      	ldr	r0, [pc, #144]	@ (8001788 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80016f6:	f7ff ff83 	bl	8001600 <LL_ADC_IsEnabled>
 80016fa:	4604      	mov	r4, r0
 80016fc:	4823      	ldr	r0, [pc, #140]	@ (800178c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80016fe:	f7ff ff7f 	bl	8001600 <LL_ADC_IsEnabled>
 8001702:	4603      	mov	r3, r0
 8001704:	4323      	orrs	r3, r4
 8001706:	2b00      	cmp	r3, #0
 8001708:	d132      	bne.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800170a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001712:	f023 030f 	bic.w	r3, r3, #15
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	6811      	ldr	r1, [r2, #0]
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	6892      	ldr	r2, [r2, #8]
 800171e:	430a      	orrs	r2, r1
 8001720:	431a      	orrs	r2, r3
 8001722:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001724:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001726:	e023      	b.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001728:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001730:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001732:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001734:	4814      	ldr	r0, [pc, #80]	@ (8001788 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8001736:	f7ff ff63 	bl	8001600 <LL_ADC_IsEnabled>
 800173a:	4604      	mov	r4, r0
 800173c:	4813      	ldr	r0, [pc, #76]	@ (800178c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800173e:	f7ff ff5f 	bl	8001600 <LL_ADC_IsEnabled>
 8001742:	4603      	mov	r3, r0
 8001744:	4323      	orrs	r3, r4
 8001746:	2b00      	cmp	r3, #0
 8001748:	d112      	bne.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800174a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001752:	f023 030f 	bic.w	r3, r3, #15
 8001756:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001758:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800175a:	e009      	b.n	8001770 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001760:	f043 0220 	orr.w	r2, r3, #32
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800176e:	e000      	b.n	8001772 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8001770:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800177a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800177e:	4618      	mov	r0, r3
 8001780:	377c      	adds	r7, #124	@ 0x7c
 8001782:	46bd      	mov	sp, r7
 8001784:	bd90      	pop	{r4, r7, pc}
 8001786:	bf00      	nop
 8001788:	50040000 	.word	0x50040000
 800178c:	50040100 	.word	0x50040100
 8001790:	50040300 	.word	0x50040300

08001794 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a4:	4b0c      	ldr	r3, [pc, #48]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017aa:	68ba      	ldr	r2, [r7, #8]
 80017ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b0:	4013      	ands	r3, r2
 80017b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b8:	68bb      	ldr	r3, [r7, #8]
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017c6:	4a04      	ldr	r2, [pc, #16]	@ (80017d8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	60d3      	str	r3, [r2, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	e000ed00 	.word	0xe000ed00

080017dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e0:	4b04      	ldr	r3, [pc, #16]	@ (80017f4 <__NVIC_GetPriorityGrouping+0x18>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0a1b      	lsrs	r3, r3, #8
 80017e6:	f003 0307 	and.w	r3, r3, #7
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000ed00 	.word	0xe000ed00

080017f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001802:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	db0b      	blt.n	8001822 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	f003 021f 	and.w	r2, r3, #31
 8001810:	4907      	ldr	r1, [pc, #28]	@ (8001830 <__NVIC_EnableIRQ+0x38>)
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	095b      	lsrs	r3, r3, #5
 8001818:	2001      	movs	r0, #1
 800181a:	fa00 f202 	lsl.w	r2, r0, r2
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000e100 	.word	0xe000e100

08001834 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	6039      	str	r1, [r7, #0]
 800183e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001840:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db0a      	blt.n	800185e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	b2da      	uxtb	r2, r3
 800184c:	490c      	ldr	r1, [pc, #48]	@ (8001880 <__NVIC_SetPriority+0x4c>)
 800184e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001852:	0112      	lsls	r2, r2, #4
 8001854:	b2d2      	uxtb	r2, r2
 8001856:	440b      	add	r3, r1
 8001858:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800185c:	e00a      	b.n	8001874 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	b2da      	uxtb	r2, r3
 8001862:	4908      	ldr	r1, [pc, #32]	@ (8001884 <__NVIC_SetPriority+0x50>)
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	3b04      	subs	r3, #4
 800186c:	0112      	lsls	r2, r2, #4
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	440b      	add	r3, r1
 8001872:	761a      	strb	r2, [r3, #24]
}
 8001874:	bf00      	nop
 8001876:	370c      	adds	r7, #12
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	e000e100 	.word	0xe000e100
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001888:	b480      	push	{r7}
 800188a:	b089      	sub	sp, #36	@ 0x24
 800188c:	af00      	add	r7, sp, #0
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	60b9      	str	r1, [r7, #8]
 8001892:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f1c3 0307 	rsb	r3, r3, #7
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	bf28      	it	cs
 80018a6:	2304      	movcs	r3, #4
 80018a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3304      	adds	r3, #4
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d902      	bls.n	80018b8 <NVIC_EncodePriority+0x30>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3b03      	subs	r3, #3
 80018b6:	e000      	b.n	80018ba <NVIC_EncodePriority+0x32>
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018bc:	f04f 32ff 	mov.w	r2, #4294967295
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43da      	mvns	r2, r3
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	401a      	ands	r2, r3
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	fa01 f303 	lsl.w	r3, r1, r3
 80018da:	43d9      	mvns	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e0:	4313      	orrs	r3, r2
         );
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3724      	adds	r7, #36	@ 0x24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b082      	sub	sp, #8
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f7ff ff4c 	bl	8001794 <__NVIC_SetPriorityGrouping>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001916:	f7ff ff61 	bl	80017dc <__NVIC_GetPriorityGrouping>
 800191a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	68b9      	ldr	r1, [r7, #8]
 8001920:	6978      	ldr	r0, [r7, #20]
 8001922:	f7ff ffb1 	bl	8001888 <NVIC_EncodePriority>
 8001926:	4602      	mov	r2, r0
 8001928:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800192c:	4611      	mov	r1, r2
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff ff80 	bl	8001834 <__NVIC_SetPriority>
}
 8001934:	bf00      	nop
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff ff54 	bl	80017f8 <__NVIC_EnableIRQ>
}
 8001950:	bf00      	nop
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001962:	2300      	movs	r3, #0
 8001964:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001966:	e14e      	b.n	8001c06 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	2101      	movs	r1, #1
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	fa01 f303 	lsl.w	r3, r1, r3
 8001974:	4013      	ands	r3, r2
 8001976:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 8140 	beq.w	8001c00 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f003 0303 	and.w	r3, r3, #3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d005      	beq.n	8001998 <HAL_GPIO_Init+0x40>
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0303 	and.w	r3, r3, #3
 8001994:	2b02      	cmp	r3, #2
 8001996:	d130      	bne.n	80019fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	2203      	movs	r2, #3
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68da      	ldr	r2, [r3, #12]
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	693a      	ldr	r2, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019ce:	2201      	movs	r2, #1
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	fa02 f303 	lsl.w	r3, r2, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 0201 	and.w	r2, r3, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	693a      	ldr	r2, [r7, #16]
 80019f8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f003 0303 	and.w	r3, r3, #3
 8001a02:	2b03      	cmp	r3, #3
 8001a04:	d017      	beq.n	8001a36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	2203      	movs	r2, #3
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d123      	bne.n	8001a8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	220f      	movs	r2, #15
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	691a      	ldr	r2, [r3, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	08da      	lsrs	r2, r3, #3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	3208      	adds	r2, #8
 8001a84:	6939      	ldr	r1, [r7, #16]
 8001a86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f003 0203 	and.w	r2, r3, #3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	f000 809a 	beq.w	8001c00 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001acc:	4b55      	ldr	r3, [pc, #340]	@ (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001ace:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ad0:	4a54      	ldr	r2, [pc, #336]	@ (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001ad2:	f043 0301 	orr.w	r3, r3, #1
 8001ad6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ad8:	4b52      	ldr	r3, [pc, #328]	@ (8001c24 <HAL_GPIO_Init+0x2cc>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ae4:	4a50      	ldr	r2, [pc, #320]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	089b      	lsrs	r3, r3, #2
 8001aea:	3302      	adds	r3, #2
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	220f      	movs	r2, #15
 8001afc:	fa02 f303 	lsl.w	r3, r2, r3
 8001b00:	43db      	mvns	r3, r3
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b0e:	d013      	beq.n	8001b38 <HAL_GPIO_Init+0x1e0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a46      	ldr	r2, [pc, #280]	@ (8001c2c <HAL_GPIO_Init+0x2d4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00d      	beq.n	8001b34 <HAL_GPIO_Init+0x1dc>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	4a45      	ldr	r2, [pc, #276]	@ (8001c30 <HAL_GPIO_Init+0x2d8>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d007      	beq.n	8001b30 <HAL_GPIO_Init+0x1d8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	4a44      	ldr	r2, [pc, #272]	@ (8001c34 <HAL_GPIO_Init+0x2dc>)
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d101      	bne.n	8001b2c <HAL_GPIO_Init+0x1d4>
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e006      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b2c:	2307      	movs	r3, #7
 8001b2e:	e004      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e002      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <HAL_GPIO_Init+0x1e2>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	f002 0203 	and.w	r2, r2, #3
 8001b40:	0092      	lsls	r2, r2, #2
 8001b42:	4093      	lsls	r3, r2
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4313      	orrs	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b4a:	4937      	ldr	r1, [pc, #220]	@ (8001c28 <HAL_GPIO_Init+0x2d0>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b58:	4b37      	ldr	r3, [pc, #220]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	43db      	mvns	r3, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d003      	beq.n	8001b7c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b82:	4b2d      	ldr	r3, [pc, #180]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ba6:	4a24      	ldr	r2, [pc, #144]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bac:	4b22      	ldr	r3, [pc, #136]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd0:	4a19      	ldr	r2, [pc, #100]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bd6:	4b18      	ldr	r3, [pc, #96]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001c38 <HAL_GPIO_Init+0x2e0>)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	3301      	adds	r3, #1
 8001c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f47f aea9 	bne.w	8001968 <HAL_GPIO_Init+0x10>
  }
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	40021000 	.word	0x40021000
 8001c28:	40010000 	.word	0x40010000
 8001c2c:	48000400 	.word	0x48000400
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000c00 	.word	0x48000c00
 8001c38:	40010400 	.word	0x40010400

08001c3c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e08d      	b.n	8001d6a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d106      	bne.n	8001c68 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7fe fc7a 	bl	800055c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2224      	movs	r2, #36	@ 0x24
 8001c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0201 	bic.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001c8c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c9c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d107      	bne.n	8001cb6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	e006      	b.n	8001cc4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689a      	ldr	r2, [r3, #8]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001cc2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d108      	bne.n	8001cde <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	685a      	ldr	r2, [r3, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	e007      	b.n	8001cee <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6812      	ldr	r2, [r2, #0]
 8001cf8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d10:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	691a      	ldr	r2, [r3, #16]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	430a      	orrs	r2, r1
 8001d2a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69d9      	ldr	r1, [r3, #28]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a1a      	ldr	r2, [r3, #32]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2220      	movs	r2, #32
 8001d56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d138      	bne.n	8001dfa <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d101      	bne.n	8001d96 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d92:	2302      	movs	r3, #2
 8001d94:	e032      	b.n	8001dfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2224      	movs	r2, #36	@ 0x24
 8001da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0201 	bic.w	r2, r2, #1
 8001db4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001dc4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6819      	ldr	r1, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f042 0201 	orr.w	r2, r2, #1
 8001de4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2220      	movs	r2, #32
 8001dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dfa:	2302      	movs	r3, #2
  }
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr

08001e08 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b20      	cmp	r3, #32
 8001e1c:	d139      	bne.n	8001e92 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d101      	bne.n	8001e2c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e033      	b.n	8001e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2224      	movs	r2, #36	@ 0x24
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0201 	bic.w	r2, r2, #1
 8001e4a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001e5a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	021b      	lsls	r3, r3, #8
 8001e60:	68fa      	ldr	r2, [r7, #12]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f042 0201 	orr.w	r2, r2, #1
 8001e7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2220      	movs	r2, #32
 8001e82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	e000      	b.n	8001e94 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e92:	2302      	movs	r3, #2
  }
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	3714      	adds	r7, #20
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr

08001ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001ea4:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40007000 	.word	0x40007000

08001ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001eca:	d130      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ecc:	4b23      	ldr	r3, [pc, #140]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ed8:	d038      	beq.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001eea:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2232      	movs	r2, #50	@ 0x32
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8001f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8001efa:	0c9b      	lsrs	r3, r3, #18
 8001efc:	3301      	adds	r3, #1
 8001efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f00:	e002      	b.n	8001f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	3b01      	subs	r3, #1
 8001f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f08:	4b14      	ldr	r3, [pc, #80]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f14:	d102      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1f2      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f1e:	695b      	ldr	r3, [r3, #20]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f28:	d110      	bne.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e00f      	b.n	8001f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3a:	d007      	beq.n	8001f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f3c:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f44:	4a05      	ldr	r2, [pc, #20]	@ (8001f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	40007000 	.word	0x40007000
 8001f60:	20000000 	.word	0x20000000
 8001f64:	431bde83 	.word	0x431bde83

08001f68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	@ 0x28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d102      	bne.n	8001f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	f000 bc4f 	b.w	800281a <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f7c:	4b97      	ldr	r3, [pc, #604]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f86:	4b95      	ldr	r3, [pc, #596]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0310 	and.w	r3, r3, #16
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80e6 	beq.w	800216a <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d007      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4c>
 8001fa4:	6a3b      	ldr	r3, [r7, #32]
 8001fa6:	2b0c      	cmp	r3, #12
 8001fa8:	f040 808d 	bne.w	80020c6 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001fac:	69fb      	ldr	r3, [r7, #28]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	f040 8089 	bne.w	80020c6 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001fb4:	4b89      	ldr	r3, [pc, #548]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_RCC_OscConfig+0x66>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d102      	bne.n	8001fce <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	f000 bc26 	b.w	800281a <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001fd2:	4b82      	ldr	r3, [pc, #520]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x80>
 8001fde:	4b7f      	ldr	r3, [pc, #508]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fe6:	e005      	b.n	8001ff4 <HAL_RCC_OscConfig+0x8c>
 8001fe8:	4b7c      	ldr	r3, [pc, #496]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8001fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fee:	091b      	lsrs	r3, r3, #4
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d224      	bcs.n	8002042 <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 fdf5 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d002      	beq.n	800200e <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f000 bc06 	b.w	800281a <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800200e:	4b73      	ldr	r3, [pc, #460]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a72      	ldr	r2, [pc, #456]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002014:	f043 0308 	orr.w	r3, r3, #8
 8002018:	6013      	str	r3, [r2, #0]
 800201a:	4b70      	ldr	r3, [pc, #448]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002026:	496d      	ldr	r1, [pc, #436]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800202c:	4b6b      	ldr	r3, [pc, #428]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	021b      	lsls	r3, r3, #8
 800203a:	4968      	ldr	r1, [pc, #416]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
 8002040:	e025      	b.n	800208e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002042:	4b66      	ldr	r3, [pc, #408]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a65      	ldr	r2, [pc, #404]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002048:	f043 0308 	orr.w	r3, r3, #8
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b63      	ldr	r3, [pc, #396]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	4960      	ldr	r1, [pc, #384]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800205c:	4313      	orrs	r3, r2
 800205e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002060:	4b5e      	ldr	r3, [pc, #376]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a1b      	ldr	r3, [r3, #32]
 800206c:	021b      	lsls	r3, r3, #8
 800206e:	495b      	ldr	r1, [pc, #364]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002074:	6a3b      	ldr	r3, [r7, #32]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d109      	bne.n	800208e <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fdb4 	bl	8002bec <RCC_SetFlashLatencyFromMSIRange>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e3c5      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800208e:	f000 fccd 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 8002092:	4602      	mov	r2, r0
 8002094:	4b51      	ldr	r3, [pc, #324]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	091b      	lsrs	r3, r3, #4
 800209a:	f003 030f 	and.w	r3, r3, #15
 800209e:	4950      	ldr	r1, [pc, #320]	@ (80021e0 <HAL_RCC_OscConfig+0x278>)
 80020a0:	5ccb      	ldrb	r3, [r1, r3]
 80020a2:	f003 031f 	and.w	r3, r3, #31
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	4a4e      	ldr	r2, [pc, #312]	@ (80021e4 <HAL_RCC_OscConfig+0x27c>)
 80020ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80020ae:	4b4e      	ldr	r3, [pc, #312]	@ (80021e8 <HAL_RCC_OscConfig+0x280>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe faaa 	bl	800060c <HAL_InitTick>
 80020b8:	4603      	mov	r3, r0
 80020ba:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80020bc:	7dfb      	ldrb	r3, [r7, #23]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d052      	beq.n	8002168 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80020c2:	7dfb      	ldrb	r3, [r7, #23]
 80020c4:	e3a9      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d032      	beq.n	8002134 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a42      	ldr	r2, [pc, #264]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020da:	f7fe fb9f 	bl	800081c <HAL_GetTick>
 80020de:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e2:	f7fe fb9b 	bl	800081c <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e392      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80020f4:	4b39      	ldr	r3, [pc, #228]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002100:	4b36      	ldr	r3, [pc, #216]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a35      	ldr	r2, [pc, #212]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002106:	f043 0308 	orr.w	r3, r3, #8
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b33      	ldr	r3, [pc, #204]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002118:	4930      	ldr	r1, [pc, #192]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800211e:	4b2f      	ldr	r3, [pc, #188]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	021b      	lsls	r3, r3, #8
 800212c:	492b      	ldr	r1, [pc, #172]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800212e:	4313      	orrs	r3, r2
 8002130:	604b      	str	r3, [r1, #4]
 8002132:	e01a      	b.n	800216a <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002134:	4b29      	ldr	r3, [pc, #164]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800213a:	f023 0301 	bic.w	r3, r3, #1
 800213e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002140:	f7fe fb6c 	bl	800081c <HAL_GetTick>
 8002144:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002148:	f7fe fb68 	bl	800081c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e35f      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x1e0>
 8002166:	e000      	b.n	800216a <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002168:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d073      	beq.n	800225e <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	2b08      	cmp	r3, #8
 800217a:	d005      	beq.n	8002188 <HAL_RCC_OscConfig+0x220>
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2b0c      	cmp	r3, #12
 8002180:	d10e      	bne.n	80021a0 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d10b      	bne.n	80021a0 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	4b14      	ldr	r3, [pc, #80]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d063      	beq.n	800225c <HAL_RCC_OscConfig+0x2f4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d15f      	bne.n	800225c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e33c      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021a8:	d106      	bne.n	80021b8 <HAL_RCC_OscConfig+0x250>
 80021aa:	4b0c      	ldr	r3, [pc, #48]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a0b      	ldr	r2, [pc, #44]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e025      	b.n	8002204 <HAL_RCC_OscConfig+0x29c>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c0:	d114      	bne.n	80021ec <HAL_RCC_OscConfig+0x284>
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a02      	ldr	r2, [pc, #8]	@ (80021dc <HAL_RCC_OscConfig+0x274>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e013      	b.n	8002204 <HAL_RCC_OscConfig+0x29c>
 80021dc:	40021000 	.word	0x40021000
 80021e0:	080060fc 	.word	0x080060fc
 80021e4:	20000000 	.word	0x20000000
 80021e8:	20000004 	.word	0x20000004
 80021ec:	4b8f      	ldr	r3, [pc, #572]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a8e      	ldr	r2, [pc, #568]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f6:	6013      	str	r3, [r2, #0]
 80021f8:	4b8c      	ldr	r3, [pc, #560]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a8b      	ldr	r2, [pc, #556]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d013      	beq.n	8002234 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220c:	f7fe fb06 	bl	800081c <HAL_GetTick>
 8002210:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002212:	e008      	b.n	8002226 <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002214:	f7fe fb02 	bl	800081c <HAL_GetTick>
 8002218:	4602      	mov	r2, r0
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	2b64      	cmp	r3, #100	@ 0x64
 8002220:	d901      	bls.n	8002226 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e2f9      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002226:	4b81      	ldr	r3, [pc, #516]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d0f0      	beq.n	8002214 <HAL_RCC_OscConfig+0x2ac>
 8002232:	e014      	b.n	800225e <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe faf2 	bl	800081c <HAL_GetTick>
 8002238:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800223c:	f7fe faee 	bl	800081c <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b64      	cmp	r3, #100	@ 0x64
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e2e5      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800224e:	4b77      	ldr	r3, [pc, #476]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f0      	bne.n	800223c <HAL_RCC_OscConfig+0x2d4>
 800225a:	e000      	b.n	800225e <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d060      	beq.n	800232c <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	2b04      	cmp	r3, #4
 800226e:	d005      	beq.n	800227c <HAL_RCC_OscConfig+0x314>
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d119      	bne.n	80022aa <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2b02      	cmp	r3, #2
 800227a:	d116      	bne.n	80022aa <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800227c:	4b6b      	ldr	r3, [pc, #428]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x32c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e2c2      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002294:	4b65      	ldr	r3, [pc, #404]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	061b      	lsls	r3, r3, #24
 80022a2:	4962      	ldr	r1, [pc, #392]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022a8:	e040      	b.n	800232c <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d023      	beq.n	80022fa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022b2:	4b5e      	ldr	r3, [pc, #376]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a5d      	ldr	r2, [pc, #372]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe faad 	bl	800081c <HAL_GetTick>
 80022c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c6:	f7fe faa9 	bl	800081c <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e2a0      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d8:	4b54      	ldr	r3, [pc, #336]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f0      	beq.n	80022c6 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e4:	4b51      	ldr	r3, [pc, #324]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	494e      	ldr	r1, [pc, #312]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	604b      	str	r3, [r1, #4]
 80022f8:	e018      	b.n	800232c <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022fa:	4b4c      	ldr	r3, [pc, #304]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a4b      	ldr	r2, [pc, #300]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002300:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002306:	f7fe fa89 	bl	800081c <HAL_GetTick>
 800230a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7fe fa85 	bl	800081c <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e27c      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002320:	4b42      	ldr	r3, [pc, #264]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8082 	beq.w	800243e <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d05f      	beq.n	8002402 <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8002342:	4b3a      	ldr	r3, [pc, #232]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002348:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	699a      	ldr	r2, [r3, #24]
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0310 	and.w	r3, r3, #16
 8002354:	429a      	cmp	r2, r3
 8002356:	d037      	beq.n	80023c8 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e254      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d01b      	beq.n	80023b2 <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 800237a:	4b2c      	ldr	r3, [pc, #176]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800237c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002380:	4a2a      	ldr	r2, [pc, #168]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002382:	f023 0301 	bic.w	r3, r3, #1
 8002386:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800238a:	f7fe fa47 	bl	800081c <HAL_GetTick>
 800238e:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002390:	e008      	b.n	80023a4 <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002392:	f7fe fa43 	bl	800081c <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	2b11      	cmp	r3, #17
 800239e:	d901      	bls.n	80023a4 <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e23a      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023a4:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1ef      	bne.n	8002392 <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80023b2:	4b1e      	ldr	r3, [pc, #120]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023b8:	f023 0210 	bic.w	r2, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	491a      	ldr	r1, [pc, #104]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023c8:	4b18      	ldr	r3, [pc, #96]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023ce:	4a17      	ldr	r2, [pc, #92]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7fe fa20 	bl	800081c <HAL_GetTick>
 80023dc:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e0:	f7fe fa1c 	bl	800081c <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b11      	cmp	r3, #17
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e213      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f2:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ef      	beq.n	80023e0 <HAL_RCC_OscConfig+0x478>
 8002400:	e01d      	b.n	800243e <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002402:	4b0a      	ldr	r3, [pc, #40]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002408:	4a08      	ldr	r2, [pc, #32]	@ (800242c <HAL_RCC_OscConfig+0x4c4>)
 800240a:	f023 0301 	bic.w	r3, r3, #1
 800240e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002412:	f7fe fa03 	bl	800081c <HAL_GetTick>
 8002416:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002418:	e00a      	b.n	8002430 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800241a:	f7fe f9ff 	bl	800081c <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b11      	cmp	r3, #17
 8002426:	d903      	bls.n	8002430 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e1f6      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
 800242c:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002430:	4ba9      	ldr	r3, [pc, #676]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002432:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1ed      	bne.n	800241a <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	2b00      	cmp	r3, #0
 8002448:	f000 80bd 	beq.w	80025c6 <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002452:	4ba1      	ldr	r3, [pc, #644]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002456:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10e      	bne.n	800247c <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800245e:	4b9e      	ldr	r3, [pc, #632]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002462:	4a9d      	ldr	r2, [pc, #628]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002464:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002468:	6593      	str	r3, [r2, #88]	@ 0x58
 800246a:	4b9b      	ldr	r3, [pc, #620]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002476:	2301      	movs	r3, #1
 8002478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800247c:	4b97      	ldr	r3, [pc, #604]	@ (80026dc <HAL_RCC_OscConfig+0x774>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002484:	2b00      	cmp	r3, #0
 8002486:	d118      	bne.n	80024ba <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002488:	4b94      	ldr	r3, [pc, #592]	@ (80026dc <HAL_RCC_OscConfig+0x774>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a93      	ldr	r2, [pc, #588]	@ (80026dc <HAL_RCC_OscConfig+0x774>)
 800248e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002492:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002494:	f7fe f9c2 	bl	800081c <HAL_GetTick>
 8002498:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7fe f9be 	bl	800081c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e1b5      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ae:	4b8b      	ldr	r3, [pc, #556]	@ (80026dc <HAL_RCC_OscConfig+0x774>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d02c      	beq.n	8002520 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80024c6:	4b84      	ldr	r3, [pc, #528]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80024c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024cc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024d8:	497f      	ldr	r1, [pc, #508]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d010      	beq.n	800250e <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80024ec:	4b7a      	ldr	r3, [pc, #488]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024f2:	4a79      	ldr	r2, [pc, #484]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80024f4:	f043 0304 	orr.w	r3, r3, #4
 80024f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80024fc:	4b76      	ldr	r3, [pc, #472]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002502:	4a75      	ldr	r2, [pc, #468]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002504:	f043 0301 	orr.w	r3, r3, #1
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800250c:	e018      	b.n	8002540 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800250e:	4b72      	ldr	r3, [pc, #456]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002514:	4a70      	ldr	r2, [pc, #448]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800251e:	e00f      	b.n	8002540 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002520:	4b6d      	ldr	r3, [pc, #436]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002526:	4a6c      	ldr	r2, [pc, #432]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002528:	f023 0301 	bic.w	r3, r3, #1
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002530:	4b69      	ldr	r3, [pc, #420]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002536:	4a68      	ldr	r2, [pc, #416]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002538:	f023 0304 	bic.w	r3, r3, #4
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d016      	beq.n	8002576 <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe f968 	bl	800081c <HAL_GetTick>
 800254c:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f7fe f964 	bl	800081c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e159      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002566:	4b5c      	ldr	r3, [pc, #368]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0ed      	beq.n	8002550 <HAL_RCC_OscConfig+0x5e8>
 8002574:	e01d      	b.n	80025b2 <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002576:	f7fe f951 	bl	800081c <HAL_GetTick>
 800257a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800257c:	e00a      	b.n	8002594 <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800257e:	f7fe f94d 	bl	800081c <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e142      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002594:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1ed      	bne.n	800257e <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80025a2:	4b4d      	ldr	r3, [pc, #308]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80025a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a8:	4a4b      	ldr	r2, [pc, #300]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80025aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80025ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d105      	bne.n	80025c6 <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	4a46      	ldr	r2, [pc, #280]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80025c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0320 	and.w	r3, r3, #32
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03c      	beq.n	800264c <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01c      	beq.n	8002614 <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025da:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80025dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80025e0:	4a3d      	ldr	r2, [pc, #244]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7fe f917 	bl	800081c <HAL_GetTick>
 80025ee:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f2:	f7fe f913 	bl	800081c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e10a      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002604:	4b34      	ldr	r3, [pc, #208]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002606:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0ef      	beq.n	80025f2 <HAL_RCC_OscConfig+0x68a>
 8002612:	e01b      	b.n	800264c <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002614:	4b30      	ldr	r3, [pc, #192]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002616:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800261a:	4a2f      	ldr	r2, [pc, #188]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002624:	f7fe f8fa 	bl	800081c <HAL_GetTick>
 8002628:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262c:	f7fe f8f6 	bl	800081c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e0ed      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800263e:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002640:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1ef      	bne.n	800262c <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 80e1 	beq.w	8002818 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	2b02      	cmp	r3, #2
 800265c:	f040 80b5 	bne.w	80027ca <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002660:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	f003 0203 	and.w	r2, r3, #3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002670:	429a      	cmp	r2, r3
 8002672:	d124      	bne.n	80026be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800267e:	3b01      	subs	r3, #1
 8002680:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002682:	429a      	cmp	r2, r3
 8002684:	d11b      	bne.n	80026be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d113      	bne.n	80026be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026a0:	085b      	lsrs	r3, r3, #1
 80026a2:	3b01      	subs	r3, #1
 80026a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d109      	bne.n	80026be <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	085b      	lsrs	r3, r3, #1
 80026b6:	3b01      	subs	r3, #1
 80026b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d05f      	beq.n	800277e <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	2b0c      	cmp	r3, #12
 80026c2:	d05a      	beq.n	800277a <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026c4:	4b04      	ldr	r3, [pc, #16]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a03      	ldr	r2, [pc, #12]	@ (80026d8 <HAL_RCC_OscConfig+0x770>)
 80026ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026ce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026d0:	f7fe f8a4 	bl	800081c <HAL_GetTick>
 80026d4:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d6:	e00c      	b.n	80026f2 <HAL_RCC_OscConfig+0x78a>
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe f89c 	bl	800081c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e093      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026f2:	4b4c      	ldr	r3, [pc, #304]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026fe:	4b49      	ldr	r3, [pc, #292]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	4b49      	ldr	r3, [pc, #292]	@ (8002828 <HAL_RCC_OscConfig+0x8c0>)
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800270e:	3a01      	subs	r2, #1
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	4311      	orrs	r1, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002718:	0212      	lsls	r2, r2, #8
 800271a:	4311      	orrs	r1, r2
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002720:	0852      	lsrs	r2, r2, #1
 8002722:	3a01      	subs	r2, #1
 8002724:	0552      	lsls	r2, r2, #21
 8002726:	4311      	orrs	r1, r2
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800272c:	0852      	lsrs	r2, r2, #1
 800272e:	3a01      	subs	r2, #1
 8002730:	0652      	lsls	r2, r2, #25
 8002732:	430a      	orrs	r2, r1
 8002734:	493b      	ldr	r1, [pc, #236]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002736:	4313      	orrs	r3, r2
 8002738:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800273a:	4b3a      	ldr	r3, [pc, #232]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a39      	ldr	r2, [pc, #228]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002740:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002744:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002746:	4b37      	ldr	r3, [pc, #220]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a36      	ldr	r2, [pc, #216]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 800274c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002750:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002752:	f7fe f863 	bl	800081c <HAL_GetTick>
 8002756:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002758:	e008      	b.n	800276c <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275a:	f7fe f85f 	bl	800081c <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d901      	bls.n	800276c <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	e056      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276c:	4b2d      	ldr	r3, [pc, #180]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0f0      	beq.n	800275a <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002778:	e04e      	b.n	8002818 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e04d      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800277e:	4b29      	ldr	r3, [pc, #164]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d146      	bne.n	8002818 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800278a:	4b26      	ldr	r3, [pc, #152]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a25      	ldr	r2, [pc, #148]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002790:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002794:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002796:	4b23      	ldr	r3, [pc, #140]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	4a22      	ldr	r2, [pc, #136]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 800279c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80027a0:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027a2:	f7fe f83b 	bl	800081c <HAL_GetTick>
 80027a6:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027a8:	e008      	b.n	80027bc <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027aa:	f7fe f837 	bl	800081c <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e02e      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027bc:	4b19      	ldr	r3, [pc, #100]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCC_OscConfig+0x842>
 80027c8:	e026      	b.n	8002818 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	d021      	beq.n	8002814 <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d0:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a13      	ldr	r2, [pc, #76]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 80027d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027dc:	f7fe f81e 	bl	800081c <HAL_GetTick>
 80027e0:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e2:	e008      	b.n	80027f6 <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e4:	f7fe f81a 	bl	800081c <HAL_GetTick>
 80027e8:	4602      	mov	r2, r0
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e011      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f0      	bne.n	80027e4 <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8002802:	4b08      	ldr	r3, [pc, #32]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <HAL_RCC_OscConfig+0x8bc>)
 8002808:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 800280c:	f023 0303 	bic.w	r3, r3, #3
 8002810:	60d3      	str	r3, [r2, #12]
 8002812:	e001      	b.n	8002818 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3728      	adds	r7, #40	@ 0x28
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40021000 	.word	0x40021000
 8002828:	f99f808c 	.word	0xf99f808c

0800282c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
 8002834:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0e7      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002840:	4b75      	ldr	r3, [pc, #468]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d910      	bls.n	8002870 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b72      	ldr	r3, [pc, #456]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 0207 	bic.w	r2, r3, #7
 8002856:	4970      	ldr	r1, [pc, #448]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b6e      	ldr	r3, [pc, #440]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e0cf      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d010      	beq.n	800289e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689a      	ldr	r2, [r3, #8]
 8002880:	4b66      	ldr	r3, [pc, #408]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002888:	429a      	cmp	r2, r3
 800288a:	d908      	bls.n	800289e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800288c:	4b63      	ldr	r3, [pc, #396]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	4960      	ldr	r1, [pc, #384]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	4313      	orrs	r3, r2
 800289c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0301 	and.w	r3, r3, #1
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d04c      	beq.n	8002944 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b03      	cmp	r3, #3
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028b2:	4b5a      	ldr	r3, [pc, #360]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d121      	bne.n	8002902 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e0a6      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028ca:	4b54      	ldr	r3, [pc, #336]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d115      	bne.n	8002902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e09a      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028e2:	4b4e      	ldr	r3, [pc, #312]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d109      	bne.n	8002902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e08e      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028f2:	4b4a      	ldr	r3, [pc, #296]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d101      	bne.n	8002902 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e086      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002902:	4b46      	ldr	r3, [pc, #280]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f023 0203 	bic.w	r2, r3, #3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4943      	ldr	r1, [pc, #268]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 8002910:	4313      	orrs	r3, r2
 8002912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002914:	f7fd ff82 	bl	800081c <HAL_GetTick>
 8002918:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800291a:	e00a      	b.n	8002932 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291c:	f7fd ff7e 	bl	800081c <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800292a:	4293      	cmp	r3, r2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e06e      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	4b3a      	ldr	r3, [pc, #232]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 020c 	and.w	r2, r3, #12
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	429a      	cmp	r2, r3
 8002942:	d1eb      	bne.n	800291c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d010      	beq.n	8002972 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	4b31      	ldr	r3, [pc, #196]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800295c:	429a      	cmp	r2, r3
 800295e:	d208      	bcs.n	8002972 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b2e      	ldr	r3, [pc, #184]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	492b      	ldr	r1, [pc, #172]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002972:	4b29      	ldr	r3, [pc, #164]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d210      	bcs.n	80029a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002980:	4b25      	ldr	r3, [pc, #148]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f023 0207 	bic.w	r2, r3, #7
 8002988:	4923      	ldr	r1, [pc, #140]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	4313      	orrs	r3, r2
 800298e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002990:	4b21      	ldr	r3, [pc, #132]	@ (8002a18 <HAL_RCC_ClockConfig+0x1ec>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d001      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e036      	b.n	8002a10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0304 	and.w	r3, r3, #4
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029ae:	4b1b      	ldr	r3, [pc, #108]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	4918      	ldr	r1, [pc, #96]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d009      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029cc:	4b13      	ldr	r3, [pc, #76]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	00db      	lsls	r3, r3, #3
 80029da:	4910      	ldr	r1, [pc, #64]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e0:	f000 f824 	bl	8002a2c <HAL_RCC_GetSysClockFreq>
 80029e4:	4602      	mov	r2, r0
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <HAL_RCC_ClockConfig+0x1f0>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	091b      	lsrs	r3, r3, #4
 80029ec:	f003 030f 	and.w	r3, r3, #15
 80029f0:	490b      	ldr	r1, [pc, #44]	@ (8002a20 <HAL_RCC_ClockConfig+0x1f4>)
 80029f2:	5ccb      	ldrb	r3, [r1, r3]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
 80029fc:	4a09      	ldr	r2, [pc, #36]	@ (8002a24 <HAL_RCC_ClockConfig+0x1f8>)
 80029fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a00:	4b09      	ldr	r3, [pc, #36]	@ (8002a28 <HAL_RCC_ClockConfig+0x1fc>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fe01 	bl	800060c <HAL_InitTick>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a0e:	7afb      	ldrb	r3, [r7, #11]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3710      	adds	r7, #16
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	40022000 	.word	0x40022000
 8002a1c:	40021000 	.word	0x40021000
 8002a20:	080060fc 	.word	0x080060fc
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004

08002a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b089      	sub	sp, #36	@ 0x24
 8002a30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	61fb      	str	r3, [r7, #28]
 8002a36:	2300      	movs	r3, #0
 8002a38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a3a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a44:	4b3b      	ldr	r3, [pc, #236]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0303 	and.w	r3, r3, #3
 8002a4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_GetSysClockFreq+0x34>
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b0c      	cmp	r3, #12
 8002a58:	d121      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d11e      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a60:	4b34      	ldr	r3, [pc, #208]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a6c:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a72:	0a1b      	lsrs	r3, r3, #8
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	61fb      	str	r3, [r7, #28]
 8002a7a:	e005      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a88:	4a2b      	ldr	r2, [pc, #172]	@ (8002b38 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10d      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	2b04      	cmp	r3, #4
 8002aa2:	d102      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aa4:	4b25      	ldr	r3, [pc, #148]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa6:	61bb      	str	r3, [r7, #24]
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d101      	bne.n	8002ab4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ab0:	4b23      	ldr	r3, [pc, #140]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ab2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d134      	bne.n	8002b24 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d003      	beq.n	8002ad2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b03      	cmp	r3, #3
 8002ace:	d003      	beq.n	8002ad8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ad0:	e005      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b3c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ad4:	617b      	str	r3, [r7, #20]
      break;
 8002ad6:	e005      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ad8:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ada:	617b      	str	r3, [r7, #20]
      break;
 8002adc:	e002      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	617b      	str	r3, [r7, #20]
      break;
 8002ae2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ae4:	4b13      	ldr	r3, [pc, #76]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	091b      	lsrs	r3, r3, #4
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	3301      	adds	r3, #1
 8002af0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002af2:	4b10      	ldr	r3, [pc, #64]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	0a1b      	lsrs	r3, r3, #8
 8002af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	fb03 f202 	mul.w	r2, r3, r2
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8002b34 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	0e5b      	lsrs	r3, r3, #25
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	3301      	adds	r3, #1
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b24:	69bb      	ldr	r3, [r7, #24]
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	@ 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	08006114 	.word	0x08006114
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	007a1200 	.word	0x007a1200

08002b44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000000 	.word	0x20000000

08002b5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b60:	f7ff fff0 	bl	8002b44 <HAL_RCC_GetHCLKFreq>
 8002b64:	4602      	mov	r2, r0
 8002b66:	4b06      	ldr	r3, [pc, #24]	@ (8002b80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	0a1b      	lsrs	r3, r3, #8
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	4904      	ldr	r1, [pc, #16]	@ (8002b84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b72:	5ccb      	ldrb	r3, [r1, r3]
 8002b74:	f003 031f 	and.w	r3, r3, #31
 8002b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40021000 	.word	0x40021000
 8002b84:	0800610c 	.word	0x0800610c

08002b88 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	220f      	movs	r2, #15
 8002b96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 0203 	and.w	r2, r3, #3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002bbc:	4b09      	ldr	r3, [pc, #36]	@ (8002be4 <HAL_RCC_GetClockConfig+0x5c>)
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	08db      	lsrs	r3, r3, #3
 8002bc2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002bca:	4b07      	ldr	r3, [pc, #28]	@ (8002be8 <HAL_RCC_GetClockConfig+0x60>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0207 	and.w	r2, r3, #7
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	601a      	str	r2, [r3, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40021000 	.word	0x40021000
 8002be8:	40022000 	.word	0x40022000

08002bec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002bf8:	4b2a      	ldr	r3, [pc, #168]	@ (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c04:	f7ff f94c 	bl	8001ea0 <HAL_PWREx_GetVoltageRange>
 8002c08:	6178      	str	r0, [r7, #20]
 8002c0a:	e014      	b.n	8002c36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c0c:	4b25      	ldr	r3, [pc, #148]	@ (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	4a24      	ldr	r2, [pc, #144]	@ (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c16:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c18:	4b22      	ldr	r3, [pc, #136]	@ (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c20:	60fb      	str	r3, [r7, #12]
 8002c22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c24:	f7ff f93c 	bl	8001ea0 <HAL_PWREx_GetVoltageRange>
 8002c28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c3c:	d10b      	bne.n	8002c56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b80      	cmp	r3, #128	@ 0x80
 8002c42:	d919      	bls.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2ba0      	cmp	r3, #160	@ 0xa0
 8002c48:	d902      	bls.n	8002c50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	613b      	str	r3, [r7, #16]
 8002c4e:	e013      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c50:	2301      	movs	r3, #1
 8002c52:	613b      	str	r3, [r7, #16]
 8002c54:	e010      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b80      	cmp	r3, #128	@ 0x80
 8002c5a:	d902      	bls.n	8002c62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	e00a      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2b80      	cmp	r3, #128	@ 0x80
 8002c66:	d102      	bne.n	8002c6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c68:	2302      	movs	r3, #2
 8002c6a:	613b      	str	r3, [r7, #16]
 8002c6c:	e004      	b.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b70      	cmp	r3, #112	@ 0x70
 8002c72:	d101      	bne.n	8002c78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c74:	2301      	movs	r3, #1
 8002c76:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 0207 	bic.w	r2, r3, #7
 8002c80:	4909      	ldr	r1, [pc, #36]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c88:	4b07      	ldr	r3, [pc, #28]	@ (8002ca8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40022000 	.word	0x40022000

08002cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b086      	sub	sp, #24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cb8:	2300      	movs	r3, #0
 8002cba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 809e 	beq.w	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002cce:	4b46      	ldr	r3, [pc, #280]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d00d      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b40      	ldr	r3, [pc, #256]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ce8:	4a3f      	ldr	r2, [pc, #252]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cee:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d00:	4b3a      	ldr	r3, [pc, #232]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a39      	ldr	r2, [pc, #228]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d0c:	f7fd fd86 	bl	800081c <HAL_GetTick>
 8002d10:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d12:	e009      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d14:	f7fd fd82 	bl	800081c <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d902      	bls.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	74fb      	strb	r3, [r7, #19]
        break;
 8002d26:	e005      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002d28:	4b30      	ldr	r3, [pc, #192]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0ef      	beq.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002d34:	7cfb      	ldrb	r3, [r7, #19]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d15a      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d3a:	4b2b      	ldr	r3, [pc, #172]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d44:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01e      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d019      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002d56:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d60:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d62:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d68:	4a1f      	ldr	r2, [pc, #124]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d6e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d72:	4b1d      	ldr	r3, [pc, #116]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d78:	4a1b      	ldr	r2, [pc, #108]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d7e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002d82:	4a19      	ldr	r2, [pc, #100]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7fd fd42 	bl	800081c <HAL_GetTick>
 8002d98:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9c:	f7fd fd3e 	bl	800081c <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d902      	bls.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	74fb      	strb	r3, [r7, #19]
            break;
 8002db2:	e006      	b.n	8002dc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db4:	4b0c      	ldr	r3, [pc, #48]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d0ec      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002dc2:	7cfb      	ldrb	r3, [r7, #19]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dc8:	4b07      	ldr	r3, [pc, #28]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4904      	ldr	r1, [pc, #16]	@ (8002de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dde:	e009      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de0:	7cfb      	ldrb	r3, [r7, #19]
 8002de2:	74bb      	strb	r3, [r7, #18]
 8002de4:	e006      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df0:	7cfb      	ldrb	r3, [r7, #19]
 8002df2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002df4:	7c7b      	ldrb	r3, [r7, #17]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d105      	bne.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002dfa:	4b6e      	ldr	r3, [pc, #440]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfe:	4a6d      	ldr	r2, [pc, #436]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e04:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00a      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e12:	4b68      	ldr	r3, [pc, #416]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e18:	f023 0203 	bic.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	4964      	ldr	r1, [pc, #400]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0302 	and.w	r3, r3, #2
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e34:	4b5f      	ldr	r3, [pc, #380]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3a:	f023 020c 	bic.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	495c      	ldr	r1, [pc, #368]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d00a      	beq.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e56:	4b57      	ldr	r3, [pc, #348]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e5c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	4953      	ldr	r1, [pc, #332]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0320 	and.w	r3, r3, #32
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e78:	4b4e      	ldr	r3, [pc, #312]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	494b      	ldr	r1, [pc, #300]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00a      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e9a:	4b46      	ldr	r3, [pc, #280]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ea0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	4942      	ldr	r1, [pc, #264]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ebc:	4b3d      	ldr	r3, [pc, #244]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eca:	493a      	ldr	r1, [pc, #232]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00a      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ede:	4b35      	ldr	r3, [pc, #212]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	4931      	ldr	r1, [pc, #196]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d00a      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f00:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	4929      	ldr	r1, [pc, #164]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f22:	4b24      	ldr	r3, [pc, #144]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f28:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	4920      	ldr	r1, [pc, #128]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d015      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f44:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f4a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	4918      	ldr	r1, [pc, #96]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f62:	d105      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f64:	4b13      	ldr	r3, [pc, #76]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a12      	ldr	r2, [pc, #72]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f6e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d015      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f82:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	490a      	ldr	r1, [pc, #40]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f96:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f9a:	d105      	bne.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f9c:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fa6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002fa8:	7cbb      	ldrb	r3, [r7, #18]
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3718      	adds	r7, #24
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
 8002fb2:	bf00      	nop
 8002fb4:	40021000 	.word	0x40021000

08002fb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e049      	b.n	800305e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d106      	bne.n	8002fe4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f841 	bl	8003066 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2202      	movs	r2, #2
 8002fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3304      	adds	r3, #4
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	4610      	mov	r0, r2
 8002ff8:	f000 f9c4 	bl	8003384 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2201      	movs	r2, #1
 8003008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2201      	movs	r2, #1
 8003010:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2201      	movs	r2, #1
 8003018:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3708      	adds	r7, #8
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003066:	b480      	push	{r7}
 8003068:	b083      	sub	sp, #12
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
	...

0800307c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b01      	cmp	r3, #1
 800308e:	d001      	beq.n	8003094 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e03b      	b.n	800310c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2202      	movs	r2, #2
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a19      	ldr	r2, [pc, #100]	@ (8003118 <HAL_TIM_Base_Start_IT+0x9c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d009      	beq.n	80030ca <HAL_TIM_Base_Start_IT+0x4e>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030be:	d004      	beq.n	80030ca <HAL_TIM_Base_Start_IT+0x4e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a15      	ldr	r2, [pc, #84]	@ (800311c <HAL_TIM_Base_Start_IT+0xa0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d115      	bne.n	80030f6 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <HAL_TIM_Base_Start_IT+0xa4>)
 80030d2:	4013      	ands	r3, r2
 80030d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2b06      	cmp	r3, #6
 80030da:	d015      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x8c>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030e2:	d011      	beq.n	8003108 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0201 	orr.w	r2, r2, #1
 80030f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030f4:	e008      	b.n	8003108 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
 8003106:	e000      	b.n	800310a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003108:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800310a:	2300      	movs	r3, #0
}
 800310c:	4618      	mov	r0, r3
 800310e:	3714      	adds	r7, #20
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr
 8003118:	40012c00 	.word	0x40012c00
 800311c:	40014000 	.word	0x40014000
 8003120:	00010007 	.word	0x00010007

08003124 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	691b      	ldr	r3, [r3, #16]
 800313a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0202 	mvn.w	r2, #2
 8003158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	699b      	ldr	r3, [r3, #24]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f8e9 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f8db 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f8ec 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0304 	and.w	r3, r3, #4
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0204 	mvn.w	r2, #4
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2202      	movs	r2, #2
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f8c3 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8b5 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f8c6 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d020      	beq.n	8003220 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d01b      	beq.n	8003220 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0208 	mvn.w	r2, #8
 80031f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2204      	movs	r2, #4
 80031f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f89d 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 800320c:	e005      	b.n	800321a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f88f 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 f8a0 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d020      	beq.n	800326c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	2b00      	cmp	r3, #0
 8003232:	d01b      	beq.n	800326c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0210 	mvn.w	r2, #16
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2208      	movs	r2, #8
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f877 	bl	8003346 <HAL_TIM_IC_CaptureCallback>
 8003258:	e005      	b.n	8003266 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325a:	6878      	ldr	r0, [r7, #4]
 800325c:	f000 f869 	bl	8003332 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	f000 f87a 	bl	800335a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00c      	beq.n	8003290 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f06f 0201 	mvn.w	r2, #1
 8003288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	f7fd f8e8 	bl	8000460 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003296:	2b00      	cmp	r3, #0
 8003298:	d104      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00c      	beq.n	80032be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80032b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 f8dd 	bl	8003478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00c      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80032da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 f8d5 	bl	800348c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d007      	beq.n	8003306 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80032fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f834 	bl	800336e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	f003 0320 	and.w	r3, r3, #32
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00c      	beq.n	800332a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	d007      	beq.n	800332a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f06f 0220 	mvn.w	r2, #32
 8003322:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 f89d 	bl	8003464 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800332a:	bf00      	nop
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr

0800335a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800335a:	b480      	push	{r7}
 800335c:	b083      	sub	sp, #12
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr

0800336e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800336e:	b480      	push	{r7}
 8003370:	b083      	sub	sp, #12
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003384:	b480      	push	{r7}
 8003386:	b085      	sub	sp, #20
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a30      	ldr	r2, [pc, #192]	@ (8003458 <TIM_Base_SetConfig+0xd4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d003      	beq.n	80033a4 <TIM_Base_SetConfig+0x20>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033a2:	d108      	bne.n	80033b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a27      	ldr	r2, [pc, #156]	@ (8003458 <TIM_Base_SetConfig+0xd4>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d00b      	beq.n	80033d6 <TIM_Base_SetConfig+0x52>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033c4:	d007      	beq.n	80033d6 <TIM_Base_SetConfig+0x52>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a24      	ldr	r2, [pc, #144]	@ (800345c <TIM_Base_SetConfig+0xd8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d003      	beq.n	80033d6 <TIM_Base_SetConfig+0x52>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a23      	ldr	r2, [pc, #140]	@ (8003460 <TIM_Base_SetConfig+0xdc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d108      	bne.n	80033e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	68fa      	ldr	r2, [r7, #12]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a12      	ldr	r2, [pc, #72]	@ (8003458 <TIM_Base_SetConfig+0xd4>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <TIM_Base_SetConfig+0xa0>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a11      	ldr	r2, [pc, #68]	@ (800345c <TIM_Base_SetConfig+0xd8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_Base_SetConfig+0xa0>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a10      	ldr	r2, [pc, #64]	@ (8003460 <TIM_Base_SetConfig+0xdc>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d103      	bne.n	800342c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d105      	bne.n	800344a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	f023 0201 	bic.w	r2, r3, #1
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	611a      	str	r2, [r3, #16]
  }
}
 800344a:	bf00      	nop
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40012c00 	.word	0x40012c00
 800345c:	40014000 	.word	0x40014000
 8003460:	40014400 	.word	0x40014400

08003464 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003480:	bf00      	nop
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <__NVIC_SetPriority>:
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	6039      	str	r1, [r7, #0]
 80034aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	db0a      	blt.n	80034ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	490c      	ldr	r1, [pc, #48]	@ (80034ec <__NVIC_SetPriority+0x4c>)
 80034ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034be:	0112      	lsls	r2, r2, #4
 80034c0:	b2d2      	uxtb	r2, r2
 80034c2:	440b      	add	r3, r1
 80034c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80034c8:	e00a      	b.n	80034e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	4908      	ldr	r1, [pc, #32]	@ (80034f0 <__NVIC_SetPriority+0x50>)
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	f003 030f 	and.w	r3, r3, #15
 80034d6:	3b04      	subs	r3, #4
 80034d8:	0112      	lsls	r2, r2, #4
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	440b      	add	r3, r1
 80034de:	761a      	strb	r2, [r3, #24]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	e000e100 	.word	0xe000e100
 80034f0:	e000ed00 	.word	0xe000ed00

080034f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80034f8:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <SysTick_Handler+0x1c>)
 80034fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80034fc:	f001 fd18 	bl	8004f30 <xTaskGetSchedulerState>
 8003500:	4603      	mov	r3, r0
 8003502:	2b01      	cmp	r3, #1
 8003504:	d001      	beq.n	800350a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003506:	f002 fb0f 	bl	8005b28 <xPortSysTickHandler>
  }
}
 800350a:	bf00      	nop
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	e000e010 	.word	0xe000e010

08003514 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003518:	2100      	movs	r1, #0
 800351a:	f06f 0004 	mvn.w	r0, #4
 800351e:	f7ff ffbf 	bl	80034a0 <__NVIC_SetPriority>
#endif
}
 8003522:	bf00      	nop
 8003524:	bd80      	pop	{r7, pc}
	...

08003528 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800352e:	f3ef 8305 	mrs	r3, IPSR
 8003532:	603b      	str	r3, [r7, #0]
  return(result);
 8003534:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800353a:	f06f 0305 	mvn.w	r3, #5
 800353e:	607b      	str	r3, [r7, #4]
 8003540:	e00c      	b.n	800355c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003542:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <osKernelInitialize+0x44>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d105      	bne.n	8003556 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800354a:	4b08      	ldr	r3, [pc, #32]	@ (800356c <osKernelInitialize+0x44>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003550:	2300      	movs	r3, #0
 8003552:	607b      	str	r3, [r7, #4]
 8003554:	e002      	b.n	800355c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003556:	f04f 33ff 	mov.w	r3, #4294967295
 800355a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800355c:	687b      	ldr	r3, [r7, #4]
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20000138 	.word	0x20000138

08003570 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003576:	f3ef 8305 	mrs	r3, IPSR
 800357a:	603b      	str	r3, [r7, #0]
  return(result);
 800357c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003582:	f06f 0305 	mvn.w	r3, #5
 8003586:	607b      	str	r3, [r7, #4]
 8003588:	e010      	b.n	80035ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800358a:	4b0b      	ldr	r3, [pc, #44]	@ (80035b8 <osKernelStart+0x48>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d109      	bne.n	80035a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003592:	f7ff ffbf 	bl	8003514 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003596:	4b08      	ldr	r3, [pc, #32]	@ (80035b8 <osKernelStart+0x48>)
 8003598:	2202      	movs	r2, #2
 800359a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800359c:	f001 f87a 	bl	8004694 <vTaskStartScheduler>
      stat = osOK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	607b      	str	r3, [r7, #4]
 80035a4:	e002      	b.n	80035ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035ac:	687b      	ldr	r3, [r7, #4]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	20000138 	.word	0x20000138

080035bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80035bc:	b580      	push	{r7, lr}
 80035be:	b08e      	sub	sp, #56	@ 0x38
 80035c0:	af04      	add	r7, sp, #16
 80035c2:	60f8      	str	r0, [r7, #12]
 80035c4:	60b9      	str	r1, [r7, #8]
 80035c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80035c8:	2300      	movs	r3, #0
 80035ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035cc:	f3ef 8305 	mrs	r3, IPSR
 80035d0:	617b      	str	r3, [r7, #20]
  return(result);
 80035d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d17e      	bne.n	80036d6 <osThreadNew+0x11a>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d07b      	beq.n	80036d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80035de:	2380      	movs	r3, #128	@ 0x80
 80035e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80035e2:	2318      	movs	r3, #24
 80035e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80035e6:	2300      	movs	r3, #0
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295
 80035ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d045      	beq.n	8003682 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d002      	beq.n	8003604 <osThreadNew+0x48>
        name = attr->name;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d008      	beq.n	800362a <osThreadNew+0x6e>
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b38      	cmp	r3, #56	@ 0x38
 800361c:	d805      	bhi.n	800362a <osThreadNew+0x6e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <osThreadNew+0x72>
        return (NULL);
 800362a:	2300      	movs	r3, #0
 800362c:	e054      	b.n	80036d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00e      	beq.n	8003664 <osThreadNew+0xa8>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	2b5b      	cmp	r3, #91	@ 0x5b
 800364c:	d90a      	bls.n	8003664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <osThreadNew+0xa8>
        mem = 1;
 800365e:	2301      	movs	r3, #1
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	e010      	b.n	8003686 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10c      	bne.n	8003686 <osThreadNew+0xca>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d108      	bne.n	8003686 <osThreadNew+0xca>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <osThreadNew+0xca>
          mem = 0;
 800367c:	2300      	movs	r3, #0
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	e001      	b.n	8003686 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d110      	bne.n	80036ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003694:	9202      	str	r2, [sp, #8]
 8003696:	9301      	str	r3, [sp, #4]
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6a3a      	ldr	r2, [r7, #32]
 80036a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 fe1a 	bl	80042dc <xTaskCreateStatic>
 80036a8:	4603      	mov	r3, r0
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	e013      	b.n	80036d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d110      	bne.n	80036d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	f107 0310 	add.w	r3, r7, #16
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 fe68 	bl	800439c <xTaskCreate>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d001      	beq.n	80036d6 <osThreadNew+0x11a>
            hTask = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80036d6:	693b      	ldr	r3, [r7, #16]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3728      	adds	r7, #40	@ 0x28
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036e8:	f3ef 8305 	mrs	r3, IPSR
 80036ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d003      	beq.n	80036fc <osDelay+0x1c>
    stat = osErrorISR;
 80036f4:	f06f 0305 	mvn.w	r3, #5
 80036f8:	60fb      	str	r3, [r7, #12]
 80036fa:	e007      	b.n	800370c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 ff8e 	bl	8004628 <vTaskDelay>
    }
  }

  return (stat);
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a07      	ldr	r2, [pc, #28]	@ (8003744 <vApplicationGetIdleTaskMemory+0x2c>)
 8003728:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4a06      	ldr	r2, [pc, #24]	@ (8003748 <vApplicationGetIdleTaskMemory+0x30>)
 800372e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2280      	movs	r2, #128	@ 0x80
 8003734:	601a      	str	r2, [r3, #0]
}
 8003736:	bf00      	nop
 8003738:	3714      	adds	r7, #20
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	2000013c 	.word	0x2000013c
 8003748:	20000198 	.word	0x20000198

0800374c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <vApplicationGetTimerTaskMemory+0x2c>)
 800375c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	4a06      	ldr	r2, [pc, #24]	@ (800377c <vApplicationGetTimerTaskMemory+0x30>)
 8003762:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800376a:	601a      	str	r2, [r3, #0]
}
 800376c:	bf00      	nop
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	20000398 	.word	0x20000398
 800377c:	200003f4 	.word	0x200003f4

08003780 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f103 0208 	add.w	r2, r3, #8
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f04f 32ff 	mov.w	r2, #4294967295
 8003798:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f103 0208 	add.w	r2, r3, #8
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	f103 0208 	add.w	r2, r3, #8
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037da:	b480      	push	{r7}
 80037dc:	b085      	sub	sp, #20
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
 80037e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	1c5a      	adds	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	601a      	str	r2, [r3, #0]
}
 8003816:	bf00      	nop
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr

08003822 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003822:	b480      	push	{r7}
 8003824:	b085      	sub	sp, #20
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003838:	d103      	bne.n	8003842 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e00c      	b.n	800385c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3308      	adds	r3, #8
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e002      	b.n	8003850 <vListInsert+0x2e>
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	429a      	cmp	r2, r3
 800385a:	d2f6      	bcs.n	800384a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	601a      	str	r2, [r3, #0]
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6892      	ldr	r2, [r2, #8]
 80038aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6852      	ldr	r2, [r2, #4]
 80038b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d103      	bne.n	80038c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	689a      	ldr	r2, [r3, #8]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003914:	f002 f878 	bl	8005a08 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003920:	68f9      	ldr	r1, [r7, #12]
 8003922:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003924:	fb01 f303 	mul.w	r3, r1, r3
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003944:	3b01      	subs	r3, #1
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800394a:	fb01 f303 	mul.w	r3, r1, r3
 800394e:	441a      	add	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	22ff      	movs	r2, #255	@ 0xff
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	22ff      	movs	r2, #255	@ 0xff
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d114      	bne.n	8003994 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d01a      	beq.n	80039a8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	3310      	adds	r3, #16
 8003976:	4618      	mov	r0, r3
 8003978:	f001 f91a 	bl	8004bb0 <xTaskRemoveFromEventList>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d012      	beq.n	80039a8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003982:	4b0d      	ldr	r3, [pc, #52]	@ (80039b8 <xQueueGenericReset+0xd0>)
 8003984:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003988:	601a      	str	r2, [r3, #0]
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	e009      	b.n	80039a8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	3310      	adds	r3, #16
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff fef1 	bl	8003780 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3324      	adds	r3, #36	@ 0x24
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff feec 	bl	8003780 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80039a8:	f002 f860 	bl	8005a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80039ac:	2301      	movs	r3, #1
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3710      	adds	r7, #16
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	e000ed04 	.word	0xe000ed04

080039bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b08e      	sub	sp, #56	@ 0x38
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
 80039c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80039d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d4:	f383 8811 	msr	BASEPRI, r3
 80039d8:	f3bf 8f6f 	isb	sy
 80039dc:	f3bf 8f4f 	dsb	sy
 80039e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80039e2:	bf00      	nop
 80039e4:	bf00      	nop
 80039e6:	e7fd      	b.n	80039e4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10b      	bne.n	8003a06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <xQueueGenericCreateStatic+0x56>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <xQueueGenericCreateStatic+0x5a>
 8003a12:	2301      	movs	r3, #1
 8003a14:	e000      	b.n	8003a18 <xQueueGenericCreateStatic+0x5c>
 8003a16:	2300      	movs	r3, #0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10b      	bne.n	8003a34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a20:	f383 8811 	msr	BASEPRI, r3
 8003a24:	f3bf 8f6f 	isb	sy
 8003a28:	f3bf 8f4f 	dsb	sy
 8003a2c:	623b      	str	r3, [r7, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d102      	bne.n	8003a40 <xQueueGenericCreateStatic+0x84>
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d101      	bne.n	8003a44 <xQueueGenericCreateStatic+0x88>
 8003a40:	2301      	movs	r3, #1
 8003a42:	e000      	b.n	8003a46 <xQueueGenericCreateStatic+0x8a>
 8003a44:	2300      	movs	r3, #0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d10b      	bne.n	8003a62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a4e:	f383 8811 	msr	BASEPRI, r3
 8003a52:	f3bf 8f6f 	isb	sy
 8003a56:	f3bf 8f4f 	dsb	sy
 8003a5a:	61fb      	str	r3, [r7, #28]
}
 8003a5c:	bf00      	nop
 8003a5e:	bf00      	nop
 8003a60:	e7fd      	b.n	8003a5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a62:	2350      	movs	r3, #80	@ 0x50
 8003a64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b50      	cmp	r3, #80	@ 0x50
 8003a6a:	d00b      	beq.n	8003a84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61bb      	str	r3, [r7, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d00d      	beq.n	8003aac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a92:	2201      	movs	r2, #1
 8003a94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9e:	9300      	str	r3, [sp, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	68b9      	ldr	r1, [r7, #8]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 f805 	bl	8003ab6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003aac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3730      	adds	r7, #48	@ 0x30
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
 8003ac2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d103      	bne.n	8003ad2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	601a      	str	r2, [r3, #0]
 8003ad0:	e002      	b.n	8003ad8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	69b8      	ldr	r0, [r7, #24]
 8003ae8:	f7ff fefe 	bl	80038e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003af4:	bf00      	nop
 8003af6:	3710      	adds	r7, #16
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}

08003afc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b08e      	sub	sp, #56	@ 0x38
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
 8003b08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d10b      	bne.n	8003b30 <xQueueGenericSend+0x34>
	__asm volatile
 8003b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1c:	f383 8811 	msr	BASEPRI, r3
 8003b20:	f3bf 8f6f 	isb	sy
 8003b24:	f3bf 8f4f 	dsb	sy
 8003b28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b2a:	bf00      	nop
 8003b2c:	bf00      	nop
 8003b2e:	e7fd      	b.n	8003b2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d103      	bne.n	8003b3e <xQueueGenericSend+0x42>
 8003b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <xQueueGenericSend+0x46>
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e000      	b.n	8003b44 <xQueueGenericSend+0x48>
 8003b42:	2300      	movs	r3, #0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <xQueueGenericSend+0x64>
	__asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d103      	bne.n	8003b6e <xQueueGenericSend+0x72>
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d101      	bne.n	8003b72 <xQueueGenericSend+0x76>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <xQueueGenericSend+0x78>
 8003b72:	2300      	movs	r3, #0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <xQueueGenericSend+0x94>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b90:	f001 f9ce 	bl	8004f30 <xTaskGetSchedulerState>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d102      	bne.n	8003ba0 <xQueueGenericSend+0xa4>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d101      	bne.n	8003ba4 <xQueueGenericSend+0xa8>
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e000      	b.n	8003ba6 <xQueueGenericSend+0xaa>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10b      	bne.n	8003bc2 <xQueueGenericSend+0xc6>
	__asm volatile
 8003baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bae:	f383 8811 	msr	BASEPRI, r3
 8003bb2:	f3bf 8f6f 	isb	sy
 8003bb6:	f3bf 8f4f 	dsb	sy
 8003bba:	61fb      	str	r3, [r7, #28]
}
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	e7fd      	b.n	8003bbe <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bc2:	f001 ff21 	bl	8005a08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d302      	bcc.n	8003bd8 <xQueueGenericSend+0xdc>
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d129      	bne.n	8003c2c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	68b9      	ldr	r1, [r7, #8]
 8003bdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003bde:	f000 fa0f 	bl	8004000 <prvCopyDataToQueue>
 8003be2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	3324      	adds	r3, #36	@ 0x24
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 ffdd 	bl	8004bb0 <xTaskRemoveFromEventList>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003bfc:	4b3f      	ldr	r3, [pc, #252]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	e00a      	b.n	8003c24 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c14:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003c16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c1a:	601a      	str	r2, [r3, #0]
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c24:	f001 ff22 	bl	8005a6c <vPortExitCritical>
				return pdPASS;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e063      	b.n	8003cf4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c32:	f001 ff1b 	bl	8005a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c36:	2300      	movs	r3, #0
 8003c38:	e05c      	b.n	8003cf4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d106      	bne.n	8003c4e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f817 	bl	8004c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c4e:	f001 ff0d 	bl	8005a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c52:	f000 fd87 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c56:	f001 fed7 	bl	8005a08 <vPortEnterCritical>
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c60:	b25b      	sxtb	r3, r3
 8003c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c66:	d103      	bne.n	8003c70 <xQueueGenericSend+0x174>
 8003c68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c72:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c76:	b25b      	sxtb	r3, r3
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7c:	d103      	bne.n	8003c86 <xQueueGenericSend+0x18a>
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c86:	f001 fef1 	bl	8005a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c8a:	1d3a      	adds	r2, r7, #4
 8003c8c:	f107 0314 	add.w	r3, r7, #20
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f001 f806 	bl	8004ca4 <xTaskCheckForTimeOut>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d124      	bne.n	8003ce8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c9e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ca0:	f000 faa6 	bl	80041f0 <prvIsQueueFull>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cac:	3310      	adds	r3, #16
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 ff2a 	bl	8004b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003cb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cba:	f000 fa31 	bl	8004120 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003cbe:	f000 fd5f 	bl	8004780 <xTaskResumeAll>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f af7c 	bne.w	8003bc2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003cca:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <xQueueGenericSend+0x200>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
 8003cda:	e772      	b.n	8003bc2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003cdc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cde:	f000 fa1f 	bl	8004120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ce2:	f000 fd4d 	bl	8004780 <xTaskResumeAll>
 8003ce6:	e76c      	b.n	8003bc2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cea:	f000 fa19 	bl	8004120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003cee:	f000 fd47 	bl	8004780 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003cf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3738      	adds	r7, #56	@ 0x38
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	e000ed04 	.word	0xe000ed04

08003d00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b090      	sub	sp, #64	@ 0x40
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003d12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d10b      	bne.n	8003d30 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d2a:	bf00      	nop
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d103      	bne.n	8003d3e <xQueueGenericSendFromISR+0x3e>
 8003d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <xQueueGenericSendFromISR+0x42>
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <xQueueGenericSendFromISR+0x44>
 8003d42:	2300      	movs	r3, #0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d10b      	bne.n	8003d60 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d4c:	f383 8811 	msr	BASEPRI, r3
 8003d50:	f3bf 8f6f 	isb	sy
 8003d54:	f3bf 8f4f 	dsb	sy
 8003d58:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003d5a:	bf00      	nop
 8003d5c:	bf00      	nop
 8003d5e:	e7fd      	b.n	8003d5c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d103      	bne.n	8003d6e <xQueueGenericSendFromISR+0x6e>
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <xQueueGenericSendFromISR+0x72>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <xQueueGenericSendFromISR+0x74>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10b      	bne.n	8003d90 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	623b      	str	r3, [r7, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	bf00      	nop
 8003d8e:	e7fd      	b.n	8003d8c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d90:	f001 ff1a 	bl	8005bc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d94:	f3ef 8211 	mrs	r2, BASEPRI
 8003d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9c:	f383 8811 	msr	BASEPRI, r3
 8003da0:	f3bf 8f6f 	isb	sy
 8003da4:	f3bf 8f4f 	dsb	sy
 8003da8:	61fa      	str	r2, [r7, #28]
 8003daa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dac:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dae:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <xQueueGenericSendFromISR+0xc2>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d12f      	bne.n	8003e22 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003dd8:	f000 f912 	bl	8004000 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003ddc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de4:	d112      	bne.n	8003e0c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d016      	beq.n	8003e1c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	3324      	adds	r3, #36	@ 0x24
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fedc 	bl	8004bb0 <xTaskRemoveFromEventList>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00e      	beq.n	8003e1c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00b      	beq.n	8003e1c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
 8003e0a:	e007      	b.n	8003e1c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e10:	3301      	adds	r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	b25a      	sxtb	r2, r3
 8003e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003e20:	e001      	b.n	8003e26 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e22:	2300      	movs	r3, #0
 8003e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e28:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e30:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3740      	adds	r7, #64	@ 0x40
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b08c      	sub	sp, #48	@ 0x30
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <xQueueReceive+0x32>
	__asm volatile
 8003e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	623b      	str	r3, [r7, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	bf00      	nop
 8003e6c:	e7fd      	b.n	8003e6a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d103      	bne.n	8003e7c <xQueueReceive+0x40>
 8003e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d101      	bne.n	8003e80 <xQueueReceive+0x44>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e000      	b.n	8003e82 <xQueueReceive+0x46>
 8003e80:	2300      	movs	r3, #0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <xQueueReceive+0x62>
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
 8003e96:	61fb      	str	r3, [r7, #28]
}
 8003e98:	bf00      	nop
 8003e9a:	bf00      	nop
 8003e9c:	e7fd      	b.n	8003e9a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e9e:	f001 f847 	bl	8004f30 <xTaskGetSchedulerState>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <xQueueReceive+0x72>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <xQueueReceive+0x76>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <xQueueReceive+0x78>
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <xQueueReceive+0x94>
	__asm volatile
 8003eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ebc:	f383 8811 	msr	BASEPRI, r3
 8003ec0:	f3bf 8f6f 	isb	sy
 8003ec4:	f3bf 8f4f 	dsb	sy
 8003ec8:	61bb      	str	r3, [r7, #24]
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	e7fd      	b.n	8003ecc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ed0:	f001 fd9a 	bl	8005a08 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01f      	beq.n	8003f20 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ee0:	68b9      	ldr	r1, [r7, #8]
 8003ee2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ee4:	f000 f8f6 	bl	80040d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eee:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ef2:	691b      	ldr	r3, [r3, #16]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00f      	beq.n	8003f18 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efa:	3310      	adds	r3, #16
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fe57 	bl	8004bb0 <xTaskRemoveFromEventList>
 8003f02:	4603      	mov	r3, r0
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d007      	beq.n	8003f18 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f08:	4b3c      	ldr	r3, [pc, #240]	@ (8003ffc <xQueueReceive+0x1c0>)
 8003f0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f18:	f001 fda8 	bl	8005a6c <vPortExitCritical>
				return pdPASS;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e069      	b.n	8003ff4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d103      	bne.n	8003f2e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f26:	f001 fda1 	bl	8005a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e062      	b.n	8003ff4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f34:	f107 0310 	add.w	r3, r7, #16
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 fe9d 	bl	8004c78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f42:	f001 fd93 	bl	8005a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f46:	f000 fc0d 	bl	8004764 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f4a:	f001 fd5d 	bl	8005a08 <vPortEnterCritical>
 8003f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003f54:	b25b      	sxtb	r3, r3
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d103      	bne.n	8003f64 <xQueueReceive+0x128>
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f66:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f6a:	b25b      	sxtb	r3, r3
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d103      	bne.n	8003f7a <xQueueReceive+0x13e>
 8003f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003f7a:	f001 fd77 	bl	8005a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f7e:	1d3a      	adds	r2, r7, #4
 8003f80:	f107 0310 	add.w	r3, r7, #16
 8003f84:	4611      	mov	r1, r2
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fe8c 	bl	8004ca4 <xTaskCheckForTimeOut>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d123      	bne.n	8003fda <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f94:	f000 f916 	bl	80041c4 <prvIsQueueEmpty>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d017      	beq.n	8003fce <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	3324      	adds	r3, #36	@ 0x24
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	4611      	mov	r1, r2
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f000 fdb0 	bl	8004b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fae:	f000 f8b7 	bl	8004120 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fb2:	f000 fbe5 	bl	8004780 <xTaskResumeAll>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d189      	bne.n	8003ed0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <xQueueReceive+0x1c0>)
 8003fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	e780      	b.n	8003ed0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fd0:	f000 f8a6 	bl	8004120 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003fd4:	f000 fbd4 	bl	8004780 <xTaskResumeAll>
 8003fd8:	e77a      	b.n	8003ed0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fdc:	f000 f8a0 	bl	8004120 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003fe0:	f000 fbce 	bl	8004780 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fe4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003fe6:	f000 f8ed 	bl	80041c4 <prvIsQueueEmpty>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f43f af6f 	beq.w	8003ed0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003ff2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3730      	adds	r7, #48	@ 0x30
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	e000ed04 	.word	0xe000ed04

08004000 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004014:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10d      	bne.n	800403a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d14d      	bne.n	80040c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 ff9e 	bl	8004f6c <xTaskPriorityDisinherit>
 8004030:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	609a      	str	r2, [r3, #8]
 8004038:	e043      	b.n	80040c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d119      	bne.n	8004074 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6858      	ldr	r0, [r3, #4]
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004048:	461a      	mov	r2, r3
 800404a:	68b9      	ldr	r1, [r7, #8]
 800404c:	f002 f818 	bl	8006080 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	685a      	ldr	r2, [r3, #4]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004058:	441a      	add	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	429a      	cmp	r2, r3
 8004068:	d32b      	bcc.n	80040c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	605a      	str	r2, [r3, #4]
 8004072:	e026      	b.n	80040c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	68d8      	ldr	r0, [r3, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407c:	461a      	mov	r2, r3
 800407e:	68b9      	ldr	r1, [r7, #8]
 8004080:	f001 fffe 	bl	8006080 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	68da      	ldr	r2, [r3, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408c:	425b      	negs	r3, r3
 800408e:	441a      	add	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d207      	bcs.n	80040b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	689a      	ldr	r2, [r3, #8]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a8:	425b      	negs	r3, r3
 80040aa:	441a      	add	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d105      	bne.n	80040c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	3b01      	subs	r3, #1
 80040c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80040ca:	697b      	ldr	r3, [r7, #20]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3718      	adds	r7, #24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d018      	beq.n	8004118 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	68da      	ldr	r2, [r3, #12]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ee:	441a      	add	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d303      	bcc.n	8004108 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	68d9      	ldr	r1, [r3, #12]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004110:	461a      	mov	r2, r3
 8004112:	6838      	ldr	r0, [r7, #0]
 8004114:	f001 ffb4 	bl	8006080 <memcpy>
	}
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004128:	f001 fc6e 	bl	8005a08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004132:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004134:	e011      	b.n	800415a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413a:	2b00      	cmp	r3, #0
 800413c:	d012      	beq.n	8004164 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	3324      	adds	r3, #36	@ 0x24
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fd34 	bl	8004bb0 <xTaskRemoveFromEventList>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800414e:	f000 fe0d 	bl	8004d6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004152:	7bfb      	ldrb	r3, [r7, #15]
 8004154:	3b01      	subs	r3, #1
 8004156:	b2db      	uxtb	r3, r3
 8004158:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800415a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800415e:	2b00      	cmp	r3, #0
 8004160:	dce9      	bgt.n	8004136 <prvUnlockQueue+0x16>
 8004162:	e000      	b.n	8004166 <prvUnlockQueue+0x46>
					break;
 8004164:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	22ff      	movs	r2, #255	@ 0xff
 800416a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800416e:	f001 fc7d 	bl	8005a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004172:	f001 fc49 	bl	8005a08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800417c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800417e:	e011      	b.n	80041a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d012      	beq.n	80041ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3310      	adds	r3, #16
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fd0f 	bl	8004bb0 <xTaskRemoveFromEventList>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004198:	f000 fde8 	bl	8004d6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800419c:	7bbb      	ldrb	r3, [r7, #14]
 800419e:	3b01      	subs	r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	dce9      	bgt.n	8004180 <prvUnlockQueue+0x60>
 80041ac:	e000      	b.n	80041b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	22ff      	movs	r2, #255	@ 0xff
 80041b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80041b8:	f001 fc58 	bl	8005a6c <vPortExitCritical>
}
 80041bc:	bf00      	nop
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041cc:	f001 fc1c 	bl	8005a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d102      	bne.n	80041de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041d8:	2301      	movs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
 80041dc:	e001      	b.n	80041e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041de:	2300      	movs	r3, #0
 80041e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041e2:	f001 fc43 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 80041e6:	68fb      	ldr	r3, [r7, #12]
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041f8:	f001 fc06 	bl	8005a08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004204:	429a      	cmp	r2, r3
 8004206:	d102      	bne.n	800420e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004208:	2301      	movs	r3, #1
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	e001      	b.n	8004212 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800420e:	2300      	movs	r3, #0
 8004210:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004212:	f001 fc2b 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 8004216:	68fb      	ldr	r3, [r7, #12]
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	e014      	b.n	800425a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004230:	4a0f      	ldr	r2, [pc, #60]	@ (8004270 <vQueueAddToRegistry+0x50>)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800423c:	490c      	ldr	r1, [pc, #48]	@ (8004270 <vQueueAddToRegistry+0x50>)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	683a      	ldr	r2, [r7, #0]
 8004242:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004246:	4a0a      	ldr	r2, [pc, #40]	@ (8004270 <vQueueAddToRegistry+0x50>)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	4413      	add	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004252:	e006      	b.n	8004262 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	3301      	adds	r3, #1
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2b07      	cmp	r3, #7
 800425e:	d9e7      	bls.n	8004230 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004260:	bf00      	nop
 8004262:	bf00      	nop
 8004264:	3714      	adds	r7, #20
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	200007f4 	.word	0x200007f4

08004274 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	60b9      	str	r1, [r7, #8]
 800427e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004284:	f001 fbc0 	bl	8005a08 <vPortEnterCritical>
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800428e:	b25b      	sxtb	r3, r3
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d103      	bne.n	800429e <vQueueWaitForMessageRestricted+0x2a>
 8004296:	697b      	ldr	r3, [r7, #20]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042a4:	b25b      	sxtb	r3, r3
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042aa:	d103      	bne.n	80042b4 <vQueueWaitForMessageRestricted+0x40>
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042b4:	f001 fbda 	bl	8005a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	3324      	adds	r3, #36	@ 0x24
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f000 fc45 	bl	8004b58 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80042ce:	6978      	ldr	r0, [r7, #20]
 80042d0:	f7ff ff26 	bl	8004120 <prvUnlockQueue>
	}
 80042d4:	bf00      	nop
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b08e      	sub	sp, #56	@ 0x38
 80042e0:	af04      	add	r7, sp, #16
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80042ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <xTaskCreateStatic+0x2c>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f4:	f383 8811 	msr	BASEPRI, r3
 80042f8:	f3bf 8f6f 	isb	sy
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	623b      	str	r3, [r7, #32]
}
 8004302:	bf00      	nop
 8004304:	bf00      	nop
 8004306:	e7fd      	b.n	8004304 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10b      	bne.n	8004326 <xTaskCreateStatic+0x4a>
	__asm volatile
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	61fb      	str	r3, [r7, #28]
}
 8004320:	bf00      	nop
 8004322:	bf00      	nop
 8004324:	e7fd      	b.n	8004322 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004326:	235c      	movs	r3, #92	@ 0x5c
 8004328:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	2b5c      	cmp	r3, #92	@ 0x5c
 800432e:	d00b      	beq.n	8004348 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004334:	f383 8811 	msr	BASEPRI, r3
 8004338:	f3bf 8f6f 	isb	sy
 800433c:	f3bf 8f4f 	dsb	sy
 8004340:	61bb      	str	r3, [r7, #24]
}
 8004342:	bf00      	nop
 8004344:	bf00      	nop
 8004346:	e7fd      	b.n	8004344 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004348:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800434a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800434c:	2b00      	cmp	r3, #0
 800434e:	d01e      	beq.n	800438e <xTaskCreateStatic+0xb2>
 8004350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004352:	2b00      	cmp	r3, #0
 8004354:	d01b      	beq.n	800438e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004362:	2202      	movs	r2, #2
 8004364:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004368:	2300      	movs	r3, #0
 800436a:	9303      	str	r3, [sp, #12]
 800436c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436e:	9302      	str	r3, [sp, #8]
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	9301      	str	r3, [sp, #4]
 8004376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004378:	9300      	str	r3, [sp, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	68b9      	ldr	r1, [r7, #8]
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 f850 	bl	8004426 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004386:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004388:	f000 f8de 	bl	8004548 <prvAddNewTaskToReadyList>
 800438c:	e001      	b.n	8004392 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004392:	697b      	ldr	r3, [r7, #20]
	}
 8004394:	4618      	mov	r0, r3
 8004396:	3728      	adds	r7, #40	@ 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800439c:	b580      	push	{r7, lr}
 800439e:	b08c      	sub	sp, #48	@ 0x30
 80043a0:	af04      	add	r7, sp, #16
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	4613      	mov	r3, r2
 80043aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043ac:	88fb      	ldrh	r3, [r7, #6]
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f001 fc4b 	bl	8005c4c <pvPortMalloc>
 80043b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80043be:	205c      	movs	r0, #92	@ 0x5c
 80043c0:	f001 fc44 	bl	8005c4c <pvPortMalloc>
 80043c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	697a      	ldr	r2, [r7, #20]
 80043d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80043d2:	e005      	b.n	80043e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80043d4:	6978      	ldr	r0, [r7, #20]
 80043d6:	f001 fd07 	bl	8005de8 <vPortFree>
 80043da:	e001      	b.n	80043e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80043dc:	2300      	movs	r3, #0
 80043de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d017      	beq.n	8004416 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80043ee:	88fa      	ldrh	r2, [r7, #6]
 80043f0:	2300      	movs	r3, #0
 80043f2:	9303      	str	r3, [sp, #12]
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	9302      	str	r3, [sp, #8]
 80043f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68b9      	ldr	r1, [r7, #8]
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f80e 	bl	8004426 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800440a:	69f8      	ldr	r0, [r7, #28]
 800440c:	f000 f89c 	bl	8004548 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004410:	2301      	movs	r3, #1
 8004412:	61bb      	str	r3, [r7, #24]
 8004414:	e002      	b.n	800441c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295
 800441a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800441c:	69bb      	ldr	r3, [r7, #24]
	}
 800441e:	4618      	mov	r0, r3
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}

08004426 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b088      	sub	sp, #32
 800442a:	af00      	add	r7, sp, #0
 800442c:	60f8      	str	r0, [r7, #12]
 800442e:	60b9      	str	r1, [r7, #8]
 8004430:	607a      	str	r2, [r7, #4]
 8004432:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004436:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	461a      	mov	r2, r3
 800443e:	21a5      	movs	r1, #165	@ 0xa5
 8004440:	f001 fdf2 	bl	8006028 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004446:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800444e:	3b01      	subs	r3, #1
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	f023 0307 	bic.w	r3, r3, #7
 800445c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	f003 0307 	and.w	r3, r3, #7
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00b      	beq.n	8004480 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004468:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446c:	f383 8811 	msr	BASEPRI, r3
 8004470:	f3bf 8f6f 	isb	sy
 8004474:	f3bf 8f4f 	dsb	sy
 8004478:	617b      	str	r3, [r7, #20]
}
 800447a:	bf00      	nop
 800447c:	bf00      	nop
 800447e:	e7fd      	b.n	800447c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01f      	beq.n	80044c6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004486:	2300      	movs	r3, #0
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e012      	b.n	80044b2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	7819      	ldrb	r1, [r3, #0]
 8004494:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	3334      	adds	r3, #52	@ 0x34
 800449c:	460a      	mov	r2, r1
 800449e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	4413      	add	r3, r2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d006      	beq.n	80044ba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2b0f      	cmp	r3, #15
 80044b6:	d9e9      	bls.n	800448c <prvInitialiseNewTask+0x66>
 80044b8:	e000      	b.n	80044bc <prvInitialiseNewTask+0x96>
			{
				break;
 80044ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80044c4:	e003      	b.n	80044ce <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80044c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	2b37      	cmp	r3, #55	@ 0x37
 80044d2:	d901      	bls.n	80044d8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80044d4:	2337      	movs	r3, #55	@ 0x37
 80044d6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80044d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80044de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044e2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80044e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044e6:	2200      	movs	r2, #0
 80044e8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ec:	3304      	adds	r3, #4
 80044ee:	4618      	mov	r0, r3
 80044f0:	f7ff f966 	bl	80037c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f6:	3318      	adds	r3, #24
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7ff f961 	bl	80037c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004500:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004502:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004506:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800450a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800450e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004512:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	2200      	movs	r2, #0
 8004518:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	69b8      	ldr	r0, [r7, #24]
 8004528:	f001 f93e 	bl	80057a8 <pxPortInitialiseStack>
 800452c:	4602      	mov	r2, r0
 800452e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004530:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004534:	2b00      	cmp	r3, #0
 8004536:	d002      	beq.n	800453e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800453a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800453c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800453e:	bf00      	nop
 8004540:	3720      	adds	r7, #32
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004550:	f001 fa5a 	bl	8005a08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004554:	4b2d      	ldr	r3, [pc, #180]	@ (800460c <prvAddNewTaskToReadyList+0xc4>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	3301      	adds	r3, #1
 800455a:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <prvAddNewTaskToReadyList+0xc4>)
 800455c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800455e:	4b2c      	ldr	r3, [pc, #176]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d109      	bne.n	800457a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004566:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800456c:	4b27      	ldr	r3, [pc, #156]	@ (800460c <prvAddNewTaskToReadyList+0xc4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d110      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004574:	f000 fc1e 	bl	8004db4 <prvInitialiseTaskLists>
 8004578:	e00d      	b.n	8004596 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800457a:	4b26      	ldr	r3, [pc, #152]	@ (8004614 <prvAddNewTaskToReadyList+0xcc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d109      	bne.n	8004596 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004582:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458c:	429a      	cmp	r2, r3
 800458e:	d802      	bhi.n	8004596 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004590:	4a1f      	ldr	r2, [pc, #124]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004596:	4b20      	ldr	r3, [pc, #128]	@ (8004618 <prvAddNewTaskToReadyList+0xd0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	3301      	adds	r3, #1
 800459c:	4a1e      	ldr	r2, [pc, #120]	@ (8004618 <prvAddNewTaskToReadyList+0xd0>)
 800459e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80045a0:	4b1d      	ldr	r3, [pc, #116]	@ (8004618 <prvAddNewTaskToReadyList+0xd0>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ac:	4b1b      	ldr	r3, [pc, #108]	@ (800461c <prvAddNewTaskToReadyList+0xd4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d903      	bls.n	80045bc <prvAddNewTaskToReadyList+0x74>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045b8:	4a18      	ldr	r2, [pc, #96]	@ (800461c <prvAddNewTaskToReadyList+0xd4>)
 80045ba:	6013      	str	r3, [r2, #0]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045c0:	4613      	mov	r3, r2
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	4a15      	ldr	r2, [pc, #84]	@ (8004620 <prvAddNewTaskToReadyList+0xd8>)
 80045ca:	441a      	add	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4619      	mov	r1, r3
 80045d2:	4610      	mov	r0, r2
 80045d4:	f7ff f901 	bl	80037da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045d8:	f001 fa48 	bl	8005a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <prvAddNewTaskToReadyList+0xcc>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00e      	beq.n	8004602 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004610 <prvAddNewTaskToReadyList+0xc8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d207      	bcs.n	8004602 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004624 <prvAddNewTaskToReadyList+0xdc>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000d08 	.word	0x20000d08
 8004610:	20000834 	.word	0x20000834
 8004614:	20000d14 	.word	0x20000d14
 8004618:	20000d24 	.word	0x20000d24
 800461c:	20000d10 	.word	0x20000d10
 8004620:	20000838 	.word	0x20000838
 8004624:	e000ed04 	.word	0xe000ed04

08004628 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d018      	beq.n	800466c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800463a:	4b14      	ldr	r3, [pc, #80]	@ (800468c <vTaskDelay+0x64>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d00b      	beq.n	800465a <vTaskDelay+0x32>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	60bb      	str	r3, [r7, #8]
}
 8004654:	bf00      	nop
 8004656:	bf00      	nop
 8004658:	e7fd      	b.n	8004656 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800465a:	f000 f883 	bl	8004764 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800465e:	2100      	movs	r1, #0
 8004660:	6878      	ldr	r0, [r7, #4]
 8004662:	f000 fcf3 	bl	800504c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004666:	f000 f88b 	bl	8004780 <xTaskResumeAll>
 800466a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d107      	bne.n	8004682 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004672:	4b07      	ldr	r3, [pc, #28]	@ (8004690 <vTaskDelay+0x68>)
 8004674:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004678:	601a      	str	r2, [r3, #0]
 800467a:	f3bf 8f4f 	dsb	sy
 800467e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004682:	bf00      	nop
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000d30 	.word	0x20000d30
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	@ 0x28
 8004698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800469a:	2300      	movs	r3, #0
 800469c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046a2:	463a      	mov	r2, r7
 80046a4:	1d39      	adds	r1, r7, #4
 80046a6:	f107 0308 	add.w	r3, r7, #8
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7ff f834 	bl	8003718 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046b0:	6839      	ldr	r1, [r7, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	9202      	str	r2, [sp, #8]
 80046b8:	9301      	str	r3, [sp, #4]
 80046ba:	2300      	movs	r3, #0
 80046bc:	9300      	str	r3, [sp, #0]
 80046be:	2300      	movs	r3, #0
 80046c0:	460a      	mov	r2, r1
 80046c2:	4922      	ldr	r1, [pc, #136]	@ (800474c <vTaskStartScheduler+0xb8>)
 80046c4:	4822      	ldr	r0, [pc, #136]	@ (8004750 <vTaskStartScheduler+0xbc>)
 80046c6:	f7ff fe09 	bl	80042dc <xTaskCreateStatic>
 80046ca:	4603      	mov	r3, r0
 80046cc:	4a21      	ldr	r2, [pc, #132]	@ (8004754 <vTaskStartScheduler+0xc0>)
 80046ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80046d0:	4b20      	ldr	r3, [pc, #128]	@ (8004754 <vTaskStartScheduler+0xc0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d002      	beq.n	80046de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80046d8:	2301      	movs	r3, #1
 80046da:	617b      	str	r3, [r7, #20]
 80046dc:	e001      	b.n	80046e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046de:	2300      	movs	r3, #0
 80046e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d102      	bne.n	80046ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046e8:	f000 fd04 	bl	80050f4 <xTimerCreateTimerTask>
 80046ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d116      	bne.n	8004722 <vTaskStartScheduler+0x8e>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	613b      	str	r3, [r7, #16]
}
 8004706:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004708:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <vTaskStartScheduler+0xc4>)
 800470a:	f04f 32ff 	mov.w	r2, #4294967295
 800470e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004710:	4b12      	ldr	r3, [pc, #72]	@ (800475c <vTaskStartScheduler+0xc8>)
 8004712:	2201      	movs	r2, #1
 8004714:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004716:	4b12      	ldr	r3, [pc, #72]	@ (8004760 <vTaskStartScheduler+0xcc>)
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800471c:	f001 f8d0 	bl	80058c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004720:	e00f      	b.n	8004742 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d10b      	bne.n	8004742 <vTaskStartScheduler+0xae>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60fb      	str	r3, [r7, #12]
}
 800473c:	bf00      	nop
 800473e:	bf00      	nop
 8004740:	e7fd      	b.n	800473e <vTaskStartScheduler+0xaa>
}
 8004742:	bf00      	nop
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	080060c0 	.word	0x080060c0
 8004750:	08004d85 	.word	0x08004d85
 8004754:	20000d2c 	.word	0x20000d2c
 8004758:	20000d28 	.word	0x20000d28
 800475c:	20000d14 	.word	0x20000d14
 8004760:	20000d0c 	.word	0x20000d0c

08004764 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004764:	b480      	push	{r7}
 8004766:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004768:	4b04      	ldr	r3, [pc, #16]	@ (800477c <vTaskSuspendAll+0x18>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3301      	adds	r3, #1
 800476e:	4a03      	ldr	r2, [pc, #12]	@ (800477c <vTaskSuspendAll+0x18>)
 8004770:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004772:	bf00      	nop
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr
 800477c:	20000d30 	.word	0x20000d30

08004780 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004786:	2300      	movs	r3, #0
 8004788:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800478a:	2300      	movs	r3, #0
 800478c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800478e:	4b42      	ldr	r3, [pc, #264]	@ (8004898 <xTaskResumeAll+0x118>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10b      	bne.n	80047ae <xTaskResumeAll+0x2e>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	603b      	str	r3, [r7, #0]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047ae:	f001 f92b 	bl	8005a08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047b2:	4b39      	ldr	r3, [pc, #228]	@ (8004898 <xTaskResumeAll+0x118>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3b01      	subs	r3, #1
 80047b8:	4a37      	ldr	r2, [pc, #220]	@ (8004898 <xTaskResumeAll+0x118>)
 80047ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047bc:	4b36      	ldr	r3, [pc, #216]	@ (8004898 <xTaskResumeAll+0x118>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d162      	bne.n	800488a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80047c4:	4b35      	ldr	r3, [pc, #212]	@ (800489c <xTaskResumeAll+0x11c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d05e      	beq.n	800488a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80047cc:	e02f      	b.n	800482e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ce:	4b34      	ldr	r3, [pc, #208]	@ (80048a0 <xTaskResumeAll+0x120>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3318      	adds	r3, #24
 80047da:	4618      	mov	r0, r3
 80047dc:	f7ff f85a 	bl	8003894 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4618      	mov	r0, r3
 80047e6:	f7ff f855 	bl	8003894 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047ee:	4b2d      	ldr	r3, [pc, #180]	@ (80048a4 <xTaskResumeAll+0x124>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d903      	bls.n	80047fe <xTaskResumeAll+0x7e>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047fa:	4a2a      	ldr	r2, [pc, #168]	@ (80048a4 <xTaskResumeAll+0x124>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004802:	4613      	mov	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	4413      	add	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4a27      	ldr	r2, [pc, #156]	@ (80048a8 <xTaskResumeAll+0x128>)
 800480c:	441a      	add	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	3304      	adds	r3, #4
 8004812:	4619      	mov	r1, r3
 8004814:	4610      	mov	r0, r2
 8004816:	f7fe ffe0 	bl	80037da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481e:	4b23      	ldr	r3, [pc, #140]	@ (80048ac <xTaskResumeAll+0x12c>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d302      	bcc.n	800482e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004828:	4b21      	ldr	r3, [pc, #132]	@ (80048b0 <xTaskResumeAll+0x130>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800482e:	4b1c      	ldr	r3, [pc, #112]	@ (80048a0 <xTaskResumeAll+0x120>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1cb      	bne.n	80047ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800483c:	f000 fb58 	bl	8004ef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004840:	4b1c      	ldr	r3, [pc, #112]	@ (80048b4 <xTaskResumeAll+0x134>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d010      	beq.n	800486e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800484c:	f000 f846 	bl	80048dc <xTaskIncrementTick>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004856:	4b16      	ldr	r3, [pc, #88]	@ (80048b0 <xTaskResumeAll+0x130>)
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3b01      	subs	r3, #1
 8004860:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1f1      	bne.n	800484c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004868:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <xTaskResumeAll+0x134>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800486e:	4b10      	ldr	r3, [pc, #64]	@ (80048b0 <xTaskResumeAll+0x130>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d009      	beq.n	800488a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004876:	2301      	movs	r3, #1
 8004878:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800487a:	4b0f      	ldr	r3, [pc, #60]	@ (80048b8 <xTaskResumeAll+0x138>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800488a:	f001 f8ef 	bl	8005a6c <vPortExitCritical>

	return xAlreadyYielded;
 800488e:	68bb      	ldr	r3, [r7, #8]
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000d30 	.word	0x20000d30
 800489c:	20000d08 	.word	0x20000d08
 80048a0:	20000cc8 	.word	0x20000cc8
 80048a4:	20000d10 	.word	0x20000d10
 80048a8:	20000838 	.word	0x20000838
 80048ac:	20000834 	.word	0x20000834
 80048b0:	20000d1c 	.word	0x20000d1c
 80048b4:	20000d18 	.word	0x20000d18
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80048c2:	4b05      	ldr	r3, [pc, #20]	@ (80048d8 <xTaskGetTickCount+0x1c>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80048c8:	687b      	ldr	r3, [r7, #4]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000d0c 	.word	0x20000d0c

080048dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048e6:	4b4f      	ldr	r3, [pc, #316]	@ (8004a24 <xTaskIncrementTick+0x148>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f040 8090 	bne.w	8004a10 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80048f0:	4b4d      	ldr	r3, [pc, #308]	@ (8004a28 <xTaskIncrementTick+0x14c>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3301      	adds	r3, #1
 80048f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80048f8:	4a4b      	ldr	r2, [pc, #300]	@ (8004a28 <xTaskIncrementTick+0x14c>)
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d121      	bne.n	8004948 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004904:	4b49      	ldr	r3, [pc, #292]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <xTaskIncrementTick+0x4a>
	__asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	603b      	str	r3, [r7, #0]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <xTaskIncrementTick+0x46>
 8004926:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	60fb      	str	r3, [r7, #12]
 800492c:	4b40      	ldr	r3, [pc, #256]	@ (8004a30 <xTaskIncrementTick+0x154>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a3e      	ldr	r2, [pc, #248]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4a3e      	ldr	r2, [pc, #248]	@ (8004a30 <xTaskIncrementTick+0x154>)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b3e      	ldr	r3, [pc, #248]	@ (8004a34 <xTaskIncrementTick+0x158>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3301      	adds	r3, #1
 8004940:	4a3c      	ldr	r2, [pc, #240]	@ (8004a34 <xTaskIncrementTick+0x158>)
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	f000 fad4 	bl	8004ef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004948:	4b3b      	ldr	r3, [pc, #236]	@ (8004a38 <xTaskIncrementTick+0x15c>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	429a      	cmp	r2, r3
 8004950:	d349      	bcc.n	80049e6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004952:	4b36      	ldr	r3, [pc, #216]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800495c:	4b36      	ldr	r3, [pc, #216]	@ (8004a38 <xTaskIncrementTick+0x15c>)
 800495e:	f04f 32ff 	mov.w	r2, #4294967295
 8004962:	601a      	str	r2, [r3, #0]
					break;
 8004964:	e03f      	b.n	80049e6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004966:	4b31      	ldr	r3, [pc, #196]	@ (8004a2c <xTaskIncrementTick+0x150>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004976:	693a      	ldr	r2, [r7, #16]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	429a      	cmp	r2, r3
 800497c:	d203      	bcs.n	8004986 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800497e:	4a2e      	ldr	r2, [pc, #184]	@ (8004a38 <xTaskIncrementTick+0x15c>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004984:	e02f      	b.n	80049e6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	3304      	adds	r3, #4
 800498a:	4618      	mov	r0, r3
 800498c:	f7fe ff82 	bl	8003894 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004994:	2b00      	cmp	r3, #0
 8004996:	d004      	beq.n	80049a2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	3318      	adds	r3, #24
 800499c:	4618      	mov	r0, r3
 800499e:	f7fe ff79 	bl	8003894 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a6:	4b25      	ldr	r3, [pc, #148]	@ (8004a3c <xTaskIncrementTick+0x160>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d903      	bls.n	80049b6 <xTaskIncrementTick+0xda>
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	4a22      	ldr	r2, [pc, #136]	@ (8004a3c <xTaskIncrementTick+0x160>)
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ba:	4613      	mov	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004a40 <xTaskIncrementTick+0x164>)
 80049c4:	441a      	add	r2, r3
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	3304      	adds	r3, #4
 80049ca:	4619      	mov	r1, r3
 80049cc:	4610      	mov	r0, r2
 80049ce:	f7fe ff04 	bl	80037da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004a44 <xTaskIncrementTick+0x168>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	429a      	cmp	r2, r3
 80049de:	d3b8      	bcc.n	8004952 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80049e0:	2301      	movs	r3, #1
 80049e2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049e4:	e7b5      	b.n	8004952 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80049e6:	4b17      	ldr	r3, [pc, #92]	@ (8004a44 <xTaskIncrementTick+0x168>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ec:	4914      	ldr	r1, [pc, #80]	@ (8004a40 <xTaskIncrementTick+0x164>)
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d901      	bls.n	8004a02 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a02:	4b11      	ldr	r3, [pc, #68]	@ (8004a48 <xTaskIncrementTick+0x16c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	617b      	str	r3, [r7, #20]
 8004a0e:	e004      	b.n	8004a1a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a10:	4b0e      	ldr	r3, [pc, #56]	@ (8004a4c <xTaskIncrementTick+0x170>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	4a0d      	ldr	r2, [pc, #52]	@ (8004a4c <xTaskIncrementTick+0x170>)
 8004a18:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a1a:	697b      	ldr	r3, [r7, #20]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	20000d30 	.word	0x20000d30
 8004a28:	20000d0c 	.word	0x20000d0c
 8004a2c:	20000cc0 	.word	0x20000cc0
 8004a30:	20000cc4 	.word	0x20000cc4
 8004a34:	20000d20 	.word	0x20000d20
 8004a38:	20000d28 	.word	0x20000d28
 8004a3c:	20000d10 	.word	0x20000d10
 8004a40:	20000838 	.word	0x20000838
 8004a44:	20000834 	.word	0x20000834
 8004a48:	20000d1c 	.word	0x20000d1c
 8004a4c:	20000d18 	.word	0x20000d18

08004a50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a56:	4b28      	ldr	r3, [pc, #160]	@ (8004af8 <vTaskSwitchContext+0xa8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a5e:	4b27      	ldr	r3, [pc, #156]	@ (8004afc <vTaskSwitchContext+0xac>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a64:	e042      	b.n	8004aec <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004a66:	4b25      	ldr	r3, [pc, #148]	@ (8004afc <vTaskSwitchContext+0xac>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a6c:	4b24      	ldr	r3, [pc, #144]	@ (8004b00 <vTaskSwitchContext+0xb0>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	e011      	b.n	8004a98 <vTaskSwitchContext+0x48>
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d10b      	bne.n	8004a92 <vTaskSwitchContext+0x42>
	__asm volatile
 8004a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	607b      	str	r3, [r7, #4]
}
 8004a8c:	bf00      	nop
 8004a8e:	bf00      	nop
 8004a90:	e7fd      	b.n	8004a8e <vTaskSwitchContext+0x3e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	491a      	ldr	r1, [pc, #104]	@ (8004b04 <vTaskSwitchContext+0xb4>)
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0e3      	beq.n	8004a74 <vTaskSwitchContext+0x24>
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4a13      	ldr	r2, [pc, #76]	@ (8004b04 <vTaskSwitchContext+0xb4>)
 8004ab8:	4413      	add	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	3308      	adds	r3, #8
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d104      	bne.n	8004adc <vTaskSwitchContext+0x8c>
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	685a      	ldr	r2, [r3, #4]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	605a      	str	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4a09      	ldr	r2, [pc, #36]	@ (8004b08 <vTaskSwitchContext+0xb8>)
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	4a06      	ldr	r2, [pc, #24]	@ (8004b00 <vTaskSwitchContext+0xb0>)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6013      	str	r3, [r2, #0]
}
 8004aec:	bf00      	nop
 8004aee:	3714      	adds	r7, #20
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr
 8004af8:	20000d30 	.word	0x20000d30
 8004afc:	20000d1c 	.word	0x20000d1c
 8004b00:	20000d10 	.word	0x20000d10
 8004b04:	20000838 	.word	0x20000838
 8004b08:	20000834 	.word	0x20000834

08004b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b084      	sub	sp, #16
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10b      	bne.n	8004b34 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fb      	str	r3, [r7, #12]
}
 8004b2e:	bf00      	nop
 8004b30:	bf00      	nop
 8004b32:	e7fd      	b.n	8004b30 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b34:	4b07      	ldr	r3, [pc, #28]	@ (8004b54 <vTaskPlaceOnEventList+0x48>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3318      	adds	r3, #24
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fe fe70 	bl	8003822 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b42:	2101      	movs	r1, #1
 8004b44:	6838      	ldr	r0, [r7, #0]
 8004b46:	f000 fa81 	bl	800504c <prvAddCurrentTaskToDelayedList>
}
 8004b4a:	bf00      	nop
 8004b4c:	3710      	adds	r7, #16
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	bd80      	pop	{r7, pc}
 8004b52:	bf00      	nop
 8004b54:	20000834 	.word	0x20000834

08004b58 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10b      	bne.n	8004b82 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	617b      	str	r3, [r7, #20]
}
 8004b7c:	bf00      	nop
 8004b7e:	bf00      	nop
 8004b80:	e7fd      	b.n	8004b7e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b82:	4b0a      	ldr	r3, [pc, #40]	@ (8004bac <vTaskPlaceOnEventListRestricted+0x54>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3318      	adds	r3, #24
 8004b88:	4619      	mov	r1, r3
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f7fe fe25 	bl	80037da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d002      	beq.n	8004b9c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004b96:	f04f 33ff 	mov.w	r3, #4294967295
 8004b9a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004b9c:	6879      	ldr	r1, [r7, #4]
 8004b9e:	68b8      	ldr	r0, [r7, #8]
 8004ba0:	f000 fa54 	bl	800504c <prvAddCurrentTaskToDelayedList>
	}
 8004ba4:	bf00      	nop
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	20000834 	.word	0x20000834

08004bb0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	e7fd      	b.n	8004bda <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	3318      	adds	r3, #24
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fe fe56 	bl	8003894 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c60 <xTaskRemoveFromEventList+0xb0>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d11d      	bne.n	8004c2c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	3304      	adds	r3, #4
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fe4d 	bl	8003894 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bfe:	4b19      	ldr	r3, [pc, #100]	@ (8004c64 <xTaskRemoveFromEventList+0xb4>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d903      	bls.n	8004c0e <xTaskRemoveFromEventList+0x5e>
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c0a:	4a16      	ldr	r2, [pc, #88]	@ (8004c64 <xTaskRemoveFromEventList+0xb4>)
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4a13      	ldr	r2, [pc, #76]	@ (8004c68 <xTaskRemoveFromEventList+0xb8>)
 8004c1c:	441a      	add	r2, r3
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	3304      	adds	r3, #4
 8004c22:	4619      	mov	r1, r3
 8004c24:	4610      	mov	r0, r2
 8004c26:	f7fe fdd8 	bl	80037da <vListInsertEnd>
 8004c2a:	e005      	b.n	8004c38 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3318      	adds	r3, #24
 8004c30:	4619      	mov	r1, r3
 8004c32:	480e      	ldr	r0, [pc, #56]	@ (8004c6c <xTaskRemoveFromEventList+0xbc>)
 8004c34:	f7fe fdd1 	bl	80037da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c70 <xTaskRemoveFromEventList+0xc0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c42:	429a      	cmp	r2, r3
 8004c44:	d905      	bls.n	8004c52 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c46:	2301      	movs	r3, #1
 8004c48:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <xTaskRemoveFromEventList+0xc4>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e001      	b.n	8004c56 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c56:	697b      	ldr	r3, [r7, #20]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}
 8004c60:	20000d30 	.word	0x20000d30
 8004c64:	20000d10 	.word	0x20000d10
 8004c68:	20000838 	.word	0x20000838
 8004c6c:	20000cc8 	.word	0x20000cc8
 8004c70:	20000834 	.word	0x20000834
 8004c74:	20000d1c 	.word	0x20000d1c

08004c78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004c80:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <vTaskInternalSetTimeOutState+0x24>)
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <vTaskInternalSetTimeOutState+0x28>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	605a      	str	r2, [r3, #4]
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	20000d20 	.word	0x20000d20
 8004ca0:	20000d0c 	.word	0x20000d0c

08004ca4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10b      	bne.n	8004ccc <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	613b      	str	r3, [r7, #16]
}
 8004cc6:	bf00      	nop
 8004cc8:	bf00      	nop
 8004cca:	e7fd      	b.n	8004cc8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d10b      	bne.n	8004cea <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd6:	f383 8811 	msr	BASEPRI, r3
 8004cda:	f3bf 8f6f 	isb	sy
 8004cde:	f3bf 8f4f 	dsb	sy
 8004ce2:	60fb      	str	r3, [r7, #12]
}
 8004ce4:	bf00      	nop
 8004ce6:	bf00      	nop
 8004ce8:	e7fd      	b.n	8004ce6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004cea:	f000 fe8d 	bl	8005a08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004cee:	4b1d      	ldr	r3, [pc, #116]	@ (8004d64 <xTaskCheckForTimeOut+0xc0>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d102      	bne.n	8004d0e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
 8004d0c:	e023      	b.n	8004d56 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	4b15      	ldr	r3, [pc, #84]	@ (8004d68 <xTaskCheckForTimeOut+0xc4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d007      	beq.n	8004d2a <xTaskCheckForTimeOut+0x86>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d302      	bcc.n	8004d2a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d24:	2301      	movs	r3, #1
 8004d26:	61fb      	str	r3, [r7, #28]
 8004d28:	e015      	b.n	8004d56 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d20b      	bcs.n	8004d4c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad2      	subs	r2, r2, r3
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f7ff ff99 	bl	8004c78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61fb      	str	r3, [r7, #28]
 8004d4a:	e004      	b.n	8004d56 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d52:	2301      	movs	r3, #1
 8004d54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d56:	f000 fe89 	bl	8005a6c <vPortExitCritical>

	return xReturn;
 8004d5a:	69fb      	ldr	r3, [r7, #28]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}
 8004d64:	20000d0c 	.word	0x20000d0c
 8004d68:	20000d20 	.word	0x20000d20

08004d6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d70:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <vTaskMissedYield+0x14>)
 8004d72:	2201      	movs	r2, #1
 8004d74:	601a      	str	r2, [r3, #0]
}
 8004d76:	bf00      	nop
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	20000d1c 	.word	0x20000d1c

08004d84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004d8c:	f000 f852 	bl	8004e34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004d90:	4b06      	ldr	r3, [pc, #24]	@ (8004dac <prvIdleTask+0x28>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d9f9      	bls.n	8004d8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <prvIdleTask+0x2c>)
 8004d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	f3bf 8f4f 	dsb	sy
 8004da4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004da8:	e7f0      	b.n	8004d8c <prvIdleTask+0x8>
 8004daa:	bf00      	nop
 8004dac:	20000838 	.word	0x20000838
 8004db0:	e000ed04 	.word	0xe000ed04

08004db4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dba:	2300      	movs	r3, #0
 8004dbc:	607b      	str	r3, [r7, #4]
 8004dbe:	e00c      	b.n	8004dda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4a12      	ldr	r2, [pc, #72]	@ (8004e14 <prvInitialiseTaskLists+0x60>)
 8004dcc:	4413      	add	r3, r2
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fcd6 	bl	8003780 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	607b      	str	r3, [r7, #4]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b37      	cmp	r3, #55	@ 0x37
 8004dde:	d9ef      	bls.n	8004dc0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004de0:	480d      	ldr	r0, [pc, #52]	@ (8004e18 <prvInitialiseTaskLists+0x64>)
 8004de2:	f7fe fccd 	bl	8003780 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004de6:	480d      	ldr	r0, [pc, #52]	@ (8004e1c <prvInitialiseTaskLists+0x68>)
 8004de8:	f7fe fcca 	bl	8003780 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004dec:	480c      	ldr	r0, [pc, #48]	@ (8004e20 <prvInitialiseTaskLists+0x6c>)
 8004dee:	f7fe fcc7 	bl	8003780 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004df2:	480c      	ldr	r0, [pc, #48]	@ (8004e24 <prvInitialiseTaskLists+0x70>)
 8004df4:	f7fe fcc4 	bl	8003780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004df8:	480b      	ldr	r0, [pc, #44]	@ (8004e28 <prvInitialiseTaskLists+0x74>)
 8004dfa:	f7fe fcc1 	bl	8003780 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004dfe:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <prvInitialiseTaskLists+0x78>)
 8004e00:	4a05      	ldr	r2, [pc, #20]	@ (8004e18 <prvInitialiseTaskLists+0x64>)
 8004e02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e04:	4b0a      	ldr	r3, [pc, #40]	@ (8004e30 <prvInitialiseTaskLists+0x7c>)
 8004e06:	4a05      	ldr	r2, [pc, #20]	@ (8004e1c <prvInitialiseTaskLists+0x68>)
 8004e08:	601a      	str	r2, [r3, #0]
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	20000838 	.word	0x20000838
 8004e18:	20000c98 	.word	0x20000c98
 8004e1c:	20000cac 	.word	0x20000cac
 8004e20:	20000cc8 	.word	0x20000cc8
 8004e24:	20000cdc 	.word	0x20000cdc
 8004e28:	20000cf4 	.word	0x20000cf4
 8004e2c:	20000cc0 	.word	0x20000cc0
 8004e30:	20000cc4 	.word	0x20000cc4

08004e34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e3a:	e019      	b.n	8004e70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e3c:	f000 fde4 	bl	8005a08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e40:	4b10      	ldr	r3, [pc, #64]	@ (8004e84 <prvCheckTasksWaitingTermination+0x50>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fe fd21 	bl	8003894 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e52:	4b0d      	ldr	r3, [pc, #52]	@ (8004e88 <prvCheckTasksWaitingTermination+0x54>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	3b01      	subs	r3, #1
 8004e58:	4a0b      	ldr	r2, [pc, #44]	@ (8004e88 <prvCheckTasksWaitingTermination+0x54>)
 8004e5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e66:	f000 fe01 	bl	8005a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f810 	bl	8004e90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e70:	4b06      	ldr	r3, [pc, #24]	@ (8004e8c <prvCheckTasksWaitingTermination+0x58>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e1      	bne.n	8004e3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20000cdc 	.word	0x20000cdc
 8004e88:	20000d08 	.word	0x20000d08
 8004e8c:	20000cf0 	.word	0x20000cf0

08004e90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d108      	bne.n	8004eb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 ff9e 	bl	8005de8 <vPortFree>
				vPortFree( pxTCB );
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 ff9b 	bl	8005de8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004eb2:	e019      	b.n	8004ee8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d103      	bne.n	8004ec6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 ff92 	bl	8005de8 <vPortFree>
	}
 8004ec4:	e010      	b.n	8004ee8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d00b      	beq.n	8004ee8 <prvDeleteTCB+0x58>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	60fb      	str	r3, [r7, #12]
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <prvDeleteTCB+0x54>
	}
 8004ee8:	bf00      	nop
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ef6:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <prvResetNextTaskUnblockTime+0x38>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d104      	bne.n	8004f0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f00:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <prvResetNextTaskUnblockTime+0x3c>)
 8004f02:	f04f 32ff 	mov.w	r2, #4294967295
 8004f06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f08:	e008      	b.n	8004f1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f0a:	4b07      	ldr	r3, [pc, #28]	@ (8004f28 <prvResetNextTaskUnblockTime+0x38>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4a04      	ldr	r2, [pc, #16]	@ (8004f2c <prvResetNextTaskUnblockTime+0x3c>)
 8004f1a:	6013      	str	r3, [r2, #0]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	20000cc0 	.word	0x20000cc0
 8004f2c:	20000d28 	.word	0x20000d28

08004f30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f36:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <xTaskGetSchedulerState+0x34>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d102      	bne.n	8004f44 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	607b      	str	r3, [r7, #4]
 8004f42:	e008      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f44:	4b08      	ldr	r3, [pc, #32]	@ (8004f68 <xTaskGetSchedulerState+0x38>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	607b      	str	r3, [r7, #4]
 8004f50:	e001      	b.n	8004f56 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f52:	2300      	movs	r3, #0
 8004f54:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f56:	687b      	ldr	r3, [r7, #4]
	}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr
 8004f64:	20000d14 	.word	0x20000d14
 8004f68:	20000d30 	.word	0x20000d30

08004f6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d058      	beq.n	8005034 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004f82:	4b2f      	ldr	r3, [pc, #188]	@ (8005040 <xTaskPriorityDisinherit+0xd4>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d00b      	beq.n	8004fa4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f90:	f383 8811 	msr	BASEPRI, r3
 8004f94:	f3bf 8f6f 	isb	sy
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	60fb      	str	r3, [r7, #12]
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	e7fd      	b.n	8004fa0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10b      	bne.n	8004fc4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	60bb      	str	r3, [r7, #8]
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	e7fd      	b.n	8004fc0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc8:	1e5a      	subs	r2, r3, #1
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d02c      	beq.n	8005034 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d128      	bne.n	8005034 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe fc54 	bl	8003894 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005004:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <xTaskPriorityDisinherit+0xd8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d903      	bls.n	8005014 <xTaskPriorityDisinherit+0xa8>
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	4a0c      	ldr	r2, [pc, #48]	@ (8005044 <xTaskPriorityDisinherit+0xd8>)
 8005012:	6013      	str	r3, [r2, #0]
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4a09      	ldr	r2, [pc, #36]	@ (8005048 <xTaskPriorityDisinherit+0xdc>)
 8005022:	441a      	add	r2, r3
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	3304      	adds	r3, #4
 8005028:	4619      	mov	r1, r3
 800502a:	4610      	mov	r0, r2
 800502c:	f7fe fbd5 	bl	80037da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005030:	2301      	movs	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005034:	697b      	ldr	r3, [r7, #20]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000834 	.word	0x20000834
 8005044:	20000d10 	.word	0x20000d10
 8005048:	20000838 	.word	0x20000838

0800504c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005056:	4b21      	ldr	r3, [pc, #132]	@ (80050dc <prvAddCurrentTaskToDelayedList+0x90>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800505c:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3304      	adds	r3, #4
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe fc16 	bl	8003894 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506e:	d10a      	bne.n	8005086 <prvAddCurrentTaskToDelayedList+0x3a>
 8005070:	683b      	ldr	r3, [r7, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005076:	4b1a      	ldr	r3, [pc, #104]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	3304      	adds	r3, #4
 800507c:	4619      	mov	r1, r3
 800507e:	4819      	ldr	r0, [pc, #100]	@ (80050e4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005080:	f7fe fbab 	bl	80037da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005084:	e026      	b.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800508e:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	429a      	cmp	r2, r3
 800509c:	d209      	bcs.n	80050b2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800509e:	4b12      	ldr	r3, [pc, #72]	@ (80050e8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b0f      	ldr	r3, [pc, #60]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fe fbb9 	bl	8003822 <vListInsert>
}
 80050b0:	e010      	b.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050b2:	4b0e      	ldr	r3, [pc, #56]	@ (80050ec <prvAddCurrentTaskToDelayedList+0xa0>)
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b0a      	ldr	r3, [pc, #40]	@ (80050e0 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7fe fbaf 	bl	8003822 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050c4:	4b0a      	ldr	r3, [pc, #40]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d202      	bcs.n	80050d4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050ce:	4a08      	ldr	r2, [pc, #32]	@ (80050f0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	6013      	str	r3, [r2, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	20000d0c 	.word	0x20000d0c
 80050e0:	20000834 	.word	0x20000834
 80050e4:	20000cf4 	.word	0x20000cf4
 80050e8:	20000cc4 	.word	0x20000cc4
 80050ec:	20000cc0 	.word	0x20000cc0
 80050f0:	20000d28 	.word	0x20000d28

080050f4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b08a      	sub	sp, #40	@ 0x28
 80050f8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80050fa:	2300      	movs	r3, #0
 80050fc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80050fe:	f000 fb13 	bl	8005728 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005102:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <xTimerCreateTimerTask+0x84>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d021      	beq.n	800514e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800510a:	2300      	movs	r3, #0
 800510c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800510e:	2300      	movs	r3, #0
 8005110:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005112:	1d3a      	adds	r2, r7, #4
 8005114:	f107 0108 	add.w	r1, r7, #8
 8005118:	f107 030c 	add.w	r3, r7, #12
 800511c:	4618      	mov	r0, r3
 800511e:	f7fe fb15 	bl	800374c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005122:	6879      	ldr	r1, [r7, #4]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	9202      	str	r2, [sp, #8]
 800512a:	9301      	str	r3, [sp, #4]
 800512c:	2302      	movs	r3, #2
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	2300      	movs	r3, #0
 8005132:	460a      	mov	r2, r1
 8005134:	4911      	ldr	r1, [pc, #68]	@ (800517c <xTimerCreateTimerTask+0x88>)
 8005136:	4812      	ldr	r0, [pc, #72]	@ (8005180 <xTimerCreateTimerTask+0x8c>)
 8005138:	f7ff f8d0 	bl	80042dc <xTaskCreateStatic>
 800513c:	4603      	mov	r3, r0
 800513e:	4a11      	ldr	r2, [pc, #68]	@ (8005184 <xTimerCreateTimerTask+0x90>)
 8005140:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005142:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <xTimerCreateTimerTask+0x90>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d001      	beq.n	800514e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800514a:	2301      	movs	r3, #1
 800514c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	613b      	str	r3, [r7, #16]
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800516c:	697b      	ldr	r3, [r7, #20]
}
 800516e:	4618      	mov	r0, r3
 8005170:	3718      	adds	r7, #24
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
 8005176:	bf00      	nop
 8005178:	20000d64 	.word	0x20000d64
 800517c:	080060c8 	.word	0x080060c8
 8005180:	080052c1 	.word	0x080052c1
 8005184:	20000d68 	.word	0x20000d68

08005188 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08a      	sub	sp, #40	@ 0x28
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <xTimerGenericCommand+0x30>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	623b      	str	r3, [r7, #32]
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80051b8:	4b19      	ldr	r3, [pc, #100]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d02a      	beq.n	8005216 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	2b05      	cmp	r3, #5
 80051d0:	dc18      	bgt.n	8005204 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051d2:	f7ff fead 	bl	8004f30 <xTaskGetSchedulerState>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d109      	bne.n	80051f0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051dc:	4b10      	ldr	r3, [pc, #64]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051de:	6818      	ldr	r0, [r3, #0]
 80051e0:	f107 0110 	add.w	r1, r7, #16
 80051e4:	2300      	movs	r3, #0
 80051e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051e8:	f7fe fc88 	bl	8003afc <xQueueGenericSend>
 80051ec:	6278      	str	r0, [r7, #36]	@ 0x24
 80051ee:	e012      	b.n	8005216 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80051f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005220 <xTimerGenericCommand+0x98>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f107 0110 	add.w	r1, r7, #16
 80051f8:	2300      	movs	r3, #0
 80051fa:	2200      	movs	r2, #0
 80051fc:	f7fe fc7e 	bl	8003afc <xQueueGenericSend>
 8005200:	6278      	str	r0, [r7, #36]	@ 0x24
 8005202:	e008      	b.n	8005216 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005204:	4b06      	ldr	r3, [pc, #24]	@ (8005220 <xTimerGenericCommand+0x98>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	f107 0110 	add.w	r1, r7, #16
 800520c:	2300      	movs	r3, #0
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	f7fe fd76 	bl	8003d00 <xQueueGenericSendFromISR>
 8005214:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005218:	4618      	mov	r0, r3
 800521a:	3728      	adds	r7, #40	@ 0x28
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	20000d64 	.word	0x20000d64

08005224 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b088      	sub	sp, #32
 8005228:	af02      	add	r7, sp, #8
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522e:	4b23      	ldr	r3, [pc, #140]	@ (80052bc <prvProcessExpiredTimer+0x98>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	68db      	ldr	r3, [r3, #12]
 8005236:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	3304      	adds	r3, #4
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe fb29 	bl	8003894 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b00      	cmp	r3, #0
 800524e:	d023      	beq.n	8005298 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	18d1      	adds	r1, r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	6978      	ldr	r0, [r7, #20]
 800525e:	f000 f8d5 	bl	800540c <prvInsertTimerInActiveList>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d020      	beq.n	80052aa <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005268:	2300      	movs	r3, #0
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	2300      	movs	r3, #0
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	2100      	movs	r1, #0
 8005272:	6978      	ldr	r0, [r7, #20]
 8005274:	f7ff ff88 	bl	8005188 <xTimerGenericCommand>
 8005278:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d114      	bne.n	80052aa <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005284:	f383 8811 	msr	BASEPRI, r3
 8005288:	f3bf 8f6f 	isb	sy
 800528c:	f3bf 8f4f 	dsb	sy
 8005290:	60fb      	str	r3, [r7, #12]
}
 8005292:	bf00      	nop
 8005294:	bf00      	nop
 8005296:	e7fd      	b.n	8005294 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	6978      	ldr	r0, [r7, #20]
 80052b0:	4798      	blx	r3
}
 80052b2:	bf00      	nop
 80052b4:	3718      	adds	r7, #24
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	20000d5c 	.word	0x20000d5c

080052c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052c8:	f107 0308 	add.w	r3, r7, #8
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f859 	bl	8005384 <prvGetNextExpireTime>
 80052d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	4619      	mov	r1, r3
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f000 f805 	bl	80052e8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80052de:	f000 f8d7 	bl	8005490 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052e2:	bf00      	nop
 80052e4:	e7f0      	b.n	80052c8 <prvTimerTask+0x8>
	...

080052e8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b084      	sub	sp, #16
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80052f2:	f7ff fa37 	bl	8004764 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80052f6:	f107 0308 	add.w	r3, r7, #8
 80052fa:	4618      	mov	r0, r3
 80052fc:	f000 f866 	bl	80053cc <prvSampleTimeNow>
 8005300:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d130      	bne.n	800536a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d10a      	bne.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
 800530e:	687a      	ldr	r2, [r7, #4]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	429a      	cmp	r2, r3
 8005314:	d806      	bhi.n	8005324 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005316:	f7ff fa33 	bl	8004780 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800531a:	68f9      	ldr	r1, [r7, #12]
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff ff81 	bl	8005224 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005322:	e024      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d008      	beq.n	800533c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800532a:	4b13      	ldr	r3, [pc, #76]	@ (8005378 <prvProcessTimerOrBlockTask+0x90>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <prvProcessTimerOrBlockTask+0x50>
 8005334:	2301      	movs	r3, #1
 8005336:	e000      	b.n	800533a <prvProcessTimerOrBlockTask+0x52>
 8005338:	2300      	movs	r3, #0
 800533a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800533c:	4b0f      	ldr	r3, [pc, #60]	@ (800537c <prvProcessTimerOrBlockTask+0x94>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	687a      	ldr	r2, [r7, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	683a      	ldr	r2, [r7, #0]
 8005348:	4619      	mov	r1, r3
 800534a:	f7fe ff93 	bl	8004274 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800534e:	f7ff fa17 	bl	8004780 <xTaskResumeAll>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d10a      	bne.n	800536e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005358:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <prvProcessTimerOrBlockTask+0x98>)
 800535a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800535e:	601a      	str	r2, [r3, #0]
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	f3bf 8f6f 	isb	sy
}
 8005368:	e001      	b.n	800536e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800536a:	f7ff fa09 	bl	8004780 <xTaskResumeAll>
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	20000d60 	.word	0x20000d60
 800537c:	20000d64 	.word	0x20000d64
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800538c:	4b0e      	ldr	r3, [pc, #56]	@ (80053c8 <prvGetNextExpireTime+0x44>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <prvGetNextExpireTime+0x16>
 8005396:	2201      	movs	r2, #1
 8005398:	e000      	b.n	800539c <prvGetNextExpireTime+0x18>
 800539a:	2200      	movs	r2, #0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053a8:	4b07      	ldr	r3, [pc, #28]	@ (80053c8 <prvGetNextExpireTime+0x44>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e001      	b.n	80053b8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr
 80053c6:	bf00      	nop
 80053c8:	20000d5c 	.word	0x20000d5c

080053cc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b084      	sub	sp, #16
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80053d4:	f7ff fa72 	bl	80048bc <xTaskGetTickCount>
 80053d8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80053da:	4b0b      	ldr	r3, [pc, #44]	@ (8005408 <prvSampleTimeNow+0x3c>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d205      	bcs.n	80053f0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80053e4:	f000 f93a 	bl	800565c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
 80053ee:	e002      	b.n	80053f6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80053f6:	4a04      	ldr	r2, [pc, #16]	@ (8005408 <prvSampleTimeNow+0x3c>)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80053fc:	68fb      	ldr	r3, [r7, #12]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
 8005406:	bf00      	nop
 8005408:	20000d6c 	.word	0x20000d6c

0800540c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b086      	sub	sp, #24
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800541a:	2300      	movs	r3, #0
 800541c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	68ba      	ldr	r2, [r7, #8]
 8005422:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	429a      	cmp	r2, r3
 8005430:	d812      	bhi.n	8005458 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	1ad2      	subs	r2, r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	429a      	cmp	r2, r3
 800543e:	d302      	bcc.n	8005446 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005440:	2301      	movs	r3, #1
 8005442:	617b      	str	r3, [r7, #20]
 8005444:	e01b      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005446:	4b10      	ldr	r3, [pc, #64]	@ (8005488 <prvInsertTimerInActiveList+0x7c>)
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3304      	adds	r3, #4
 800544e:	4619      	mov	r1, r3
 8005450:	4610      	mov	r0, r2
 8005452:	f7fe f9e6 	bl	8003822 <vListInsert>
 8005456:	e012      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	429a      	cmp	r2, r3
 800545e:	d206      	bcs.n	800546e <prvInsertTimerInActiveList+0x62>
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	429a      	cmp	r2, r3
 8005466:	d302      	bcc.n	800546e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e007      	b.n	800547e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800546e:	4b07      	ldr	r3, [pc, #28]	@ (800548c <prvInsertTimerInActiveList+0x80>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3304      	adds	r3, #4
 8005476:	4619      	mov	r1, r3
 8005478:	4610      	mov	r0, r2
 800547a:	f7fe f9d2 	bl	8003822 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800547e:	697b      	ldr	r3, [r7, #20]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	20000d60 	.word	0x20000d60
 800548c:	20000d5c 	.word	0x20000d5c

08005490 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08e      	sub	sp, #56	@ 0x38
 8005494:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005496:	e0ce      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	da19      	bge.n	80054d2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800549e:	1d3b      	adds	r3, r7, #4
 80054a0:	3304      	adds	r3, #4
 80054a2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80054a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	61fb      	str	r3, [r7, #28]
}
 80054bc:	bf00      	nop
 80054be:	bf00      	nop
 80054c0:	e7fd      	b.n	80054be <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80054c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054c8:	6850      	ldr	r0, [r2, #4]
 80054ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054cc:	6892      	ldr	r2, [r2, #8]
 80054ce:	4611      	mov	r1, r2
 80054d0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f2c0 80ae 	blt.w	8005636 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e0:	695b      	ldr	r3, [r3, #20]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d004      	beq.n	80054f0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fe f9d2 	bl	8003894 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054f0:	463b      	mov	r3, r7
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7ff ff6a 	bl	80053cc <prvSampleTimeNow>
 80054f8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b09      	cmp	r3, #9
 80054fe:	f200 8097 	bhi.w	8005630 <prvProcessReceivedCommands+0x1a0>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <prvProcessReceivedCommands+0x78>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005531 	.word	0x08005531
 800550c:	08005531 	.word	0x08005531
 8005510:	08005531 	.word	0x08005531
 8005514:	080055a7 	.word	0x080055a7
 8005518:	080055bb 	.word	0x080055bb
 800551c:	08005607 	.word	0x08005607
 8005520:	08005531 	.word	0x08005531
 8005524:	08005531 	.word	0x08005531
 8005528:	080055a7 	.word	0x080055a7
 800552c:	080055bb 	.word	0x080055bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	699b      	ldr	r3, [r3, #24]
 8005548:	18d1      	adds	r1, r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800554e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005550:	f7ff ff5c 	bl	800540c <prvInsertTimerInActiveList>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d06c      	beq.n	8005634 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800555a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005560:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005564:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d061      	beq.n	8005634 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	441a      	add	r2, r3
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	2100      	movs	r1, #0
 8005580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005582:	f7ff fe01 	bl	8005188 <xTimerGenericCommand>
 8005586:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005588:	6a3b      	ldr	r3, [r7, #32]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d152      	bne.n	8005634 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	61bb      	str	r3, [r7, #24]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055ac:	f023 0301 	bic.w	r3, r3, #1
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80055b8:	e03d      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	b2da      	uxtb	r2, r3
 80055c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055d4:	699b      	ldr	r3, [r3, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d10b      	bne.n	80055f2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80055da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055de:	f383 8811 	msr	BASEPRI, r3
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	f3bf 8f4f 	dsb	sy
 80055ea:	617b      	str	r3, [r7, #20]
}
 80055ec:	bf00      	nop
 80055ee:	bf00      	nop
 80055f0:	e7fd      	b.n	80055ee <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f8:	18d1      	adds	r1, r2, r3
 80055fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005600:	f7ff ff04 	bl	800540c <prvInsertTimerInActiveList>
					break;
 8005604:	e017      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800560c:	f003 0302 	and.w	r3, r3, #2
 8005610:	2b00      	cmp	r3, #0
 8005612:	d103      	bne.n	800561c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005616:	f000 fbe7 	bl	8005de8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800561a:	e00c      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800561c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800561e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005622:	f023 0301 	bic.w	r3, r3, #1
 8005626:	b2da      	uxtb	r2, r3
 8005628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800562a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800562e:	e002      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <prvProcessReceivedCommands+0x1a6>
					break;
 8005634:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005636:	4b08      	ldr	r3, [pc, #32]	@ (8005658 <prvProcessReceivedCommands+0x1c8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	1d39      	adds	r1, r7, #4
 800563c:	2200      	movs	r2, #0
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe fbfc 	bl	8003e3c <xQueueReceive>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	f47f af26 	bne.w	8005498 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800564c:	bf00      	nop
 800564e:	bf00      	nop
 8005650:	3730      	adds	r7, #48	@ 0x30
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000d64 	.word	0x20000d64

0800565c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b088      	sub	sp, #32
 8005660:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005662:	e049      	b.n	80056f8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005664:	4b2e      	ldr	r3, [pc, #184]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566e:	4b2c      	ldr	r3, [pc, #176]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3304      	adds	r3, #4
 800567c:	4618      	mov	r0, r3
 800567e:	f7fe f909 	bl	8003894 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6a1b      	ldr	r3, [r3, #32]
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d02f      	beq.n	80056f8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d90e      	bls.n	80056c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	68ba      	ldr	r2, [r7, #8]
 80056ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	3304      	adds	r3, #4
 80056be:	4619      	mov	r1, r3
 80056c0:	4610      	mov	r0, r2
 80056c2:	f7fe f8ae 	bl	8003822 <vListInsert>
 80056c6:	e017      	b.n	80056f8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056c8:	2300      	movs	r3, #0
 80056ca:	9300      	str	r3, [sp, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	2100      	movs	r1, #0
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f7ff fd58 	bl	8005188 <xTimerGenericCommand>
 80056d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d10b      	bne.n	80056f8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80056e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	603b      	str	r3, [r7, #0]
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	e7fd      	b.n	80056f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056f8:	4b09      	ldr	r3, [pc, #36]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1b0      	bne.n	8005664 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <prvSwitchTimerLists+0xc8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a04      	ldr	r2, [pc, #16]	@ (8005720 <prvSwitchTimerLists+0xc4>)
 800570e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005710:	4a04      	ldr	r2, [pc, #16]	@ (8005724 <prvSwitchTimerLists+0xc8>)
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	6013      	str	r3, [r2, #0]
}
 8005716:	bf00      	nop
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000d5c 	.word	0x20000d5c
 8005724:	20000d60 	.word	0x20000d60

08005728 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800572e:	f000 f96b 	bl	8005a08 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005732:	4b15      	ldr	r3, [pc, #84]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d120      	bne.n	800577c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800573a:	4814      	ldr	r0, [pc, #80]	@ (800578c <prvCheckForValidListAndQueue+0x64>)
 800573c:	f7fe f820 	bl	8003780 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005740:	4813      	ldr	r0, [pc, #76]	@ (8005790 <prvCheckForValidListAndQueue+0x68>)
 8005742:	f7fe f81d 	bl	8003780 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005746:	4b13      	ldr	r3, [pc, #76]	@ (8005794 <prvCheckForValidListAndQueue+0x6c>)
 8005748:	4a10      	ldr	r2, [pc, #64]	@ (800578c <prvCheckForValidListAndQueue+0x64>)
 800574a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800574c:	4b12      	ldr	r3, [pc, #72]	@ (8005798 <prvCheckForValidListAndQueue+0x70>)
 800574e:	4a10      	ldr	r2, [pc, #64]	@ (8005790 <prvCheckForValidListAndQueue+0x68>)
 8005750:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005752:	2300      	movs	r3, #0
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	4b11      	ldr	r3, [pc, #68]	@ (800579c <prvCheckForValidListAndQueue+0x74>)
 8005758:	4a11      	ldr	r2, [pc, #68]	@ (80057a0 <prvCheckForValidListAndQueue+0x78>)
 800575a:	2110      	movs	r1, #16
 800575c:	200a      	movs	r0, #10
 800575e:	f7fe f92d 	bl	80039bc <xQueueGenericCreateStatic>
 8005762:	4603      	mov	r3, r0
 8005764:	4a08      	ldr	r2, [pc, #32]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005766:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005768:	4b07      	ldr	r3, [pc, #28]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d005      	beq.n	800577c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005770:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <prvCheckForValidListAndQueue+0x60>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	490b      	ldr	r1, [pc, #44]	@ (80057a4 <prvCheckForValidListAndQueue+0x7c>)
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fd52 	bl	8004220 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800577c:	f000 f976 	bl	8005a6c <vPortExitCritical>
}
 8005780:	bf00      	nop
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000d64 	.word	0x20000d64
 800578c:	20000d34 	.word	0x20000d34
 8005790:	20000d48 	.word	0x20000d48
 8005794:	20000d5c 	.word	0x20000d5c
 8005798:	20000d60 	.word	0x20000d60
 800579c:	20000e10 	.word	0x20000e10
 80057a0:	20000d70 	.word	0x20000d70
 80057a4:	080060d0 	.word	0x080060d0

080057a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3b04      	subs	r3, #4
 80057b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3b04      	subs	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	f023 0201 	bic.w	r2, r3, #1
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80057d8:	4a0c      	ldr	r2, [pc, #48]	@ (800580c <pxPortInitialiseStack+0x64>)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3b14      	subs	r3, #20
 80057e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b04      	subs	r3, #4
 80057ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f06f 0202 	mvn.w	r2, #2
 80057f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	3b20      	subs	r3, #32
 80057fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80057fe:	68fb      	ldr	r3, [r7, #12]
}
 8005800:	4618      	mov	r0, r3
 8005802:	3714      	adds	r7, #20
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr
 800580c:	08005811 	.word	0x08005811

08005810 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005810:	b480      	push	{r7}
 8005812:	b085      	sub	sp, #20
 8005814:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005816:	2300      	movs	r3, #0
 8005818:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800581a:	4b13      	ldr	r3, [pc, #76]	@ (8005868 <prvTaskExitError+0x58>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005822:	d00b      	beq.n	800583c <prvTaskExitError+0x2c>
	__asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	60fb      	str	r3, [r7, #12]
}
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <prvTaskExitError+0x28>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	60bb      	str	r3, [r7, #8]
}
 800584e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005850:	bf00      	nop
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0fc      	beq.n	8005852 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005858:	bf00      	nop
 800585a:	bf00      	nop
 800585c:	3714      	adds	r7, #20
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr
 8005866:	bf00      	nop
 8005868:	2000000c 	.word	0x2000000c
 800586c:	00000000 	.word	0x00000000

08005870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005870:	4b07      	ldr	r3, [pc, #28]	@ (8005890 <pxCurrentTCBConst2>)
 8005872:	6819      	ldr	r1, [r3, #0]
 8005874:	6808      	ldr	r0, [r1, #0]
 8005876:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	f380 8809 	msr	PSP, r0
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f04f 0000 	mov.w	r0, #0
 8005886:	f380 8811 	msr	BASEPRI, r0
 800588a:	4770      	bx	lr
 800588c:	f3af 8000 	nop.w

08005890 <pxCurrentTCBConst2>:
 8005890:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop

08005898 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005898:	4808      	ldr	r0, [pc, #32]	@ (80058bc <prvPortStartFirstTask+0x24>)
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	6800      	ldr	r0, [r0, #0]
 800589e:	f380 8808 	msr	MSP, r0
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8814 	msr	CONTROL, r0
 80058aa:	b662      	cpsie	i
 80058ac:	b661      	cpsie	f
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	df00      	svc	0
 80058b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80058ba:	bf00      	nop
 80058bc:	e000ed08 	.word	0xe000ed08

080058c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058c6:	4b47      	ldr	r3, [pc, #284]	@ (80059e4 <xPortStartScheduler+0x124>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a47      	ldr	r2, [pc, #284]	@ (80059e8 <xPortStartScheduler+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d10b      	bne.n	80058e8 <xPortStartScheduler+0x28>
	__asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	613b      	str	r3, [r7, #16]
}
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058e8:	4b3e      	ldr	r3, [pc, #248]	@ (80059e4 <xPortStartScheduler+0x124>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a3f      	ldr	r2, [pc, #252]	@ (80059ec <xPortStartScheduler+0x12c>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d10b      	bne.n	800590a <xPortStartScheduler+0x4a>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	60fb      	str	r3, [r7, #12]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800590a:	4b39      	ldr	r3, [pc, #228]	@ (80059f0 <xPortStartScheduler+0x130>)
 800590c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	b2db      	uxtb	r3, r3
 8005914:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	22ff      	movs	r2, #255	@ 0xff
 800591a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	b2db      	uxtb	r3, r3
 8005922:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800592c:	b2da      	uxtb	r2, r3
 800592e:	4b31      	ldr	r3, [pc, #196]	@ (80059f4 <xPortStartScheduler+0x134>)
 8005930:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005932:	4b31      	ldr	r3, [pc, #196]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005934:	2207      	movs	r2, #7
 8005936:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005938:	e009      	b.n	800594e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800593a:	4b2f      	ldr	r3, [pc, #188]	@ (80059f8 <xPortStartScheduler+0x138>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	3b01      	subs	r3, #1
 8005940:	4a2d      	ldr	r2, [pc, #180]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005942:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	b2db      	uxtb	r3, r3
 800594c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800594e:	78fb      	ldrb	r3, [r7, #3]
 8005950:	b2db      	uxtb	r3, r3
 8005952:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005956:	2b80      	cmp	r3, #128	@ 0x80
 8005958:	d0ef      	beq.n	800593a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800595a:	4b27      	ldr	r3, [pc, #156]	@ (80059f8 <xPortStartScheduler+0x138>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f1c3 0307 	rsb	r3, r3, #7
 8005962:	2b04      	cmp	r3, #4
 8005964:	d00b      	beq.n	800597e <xPortStartScheduler+0xbe>
	__asm volatile
 8005966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596a:	f383 8811 	msr	BASEPRI, r3
 800596e:	f3bf 8f6f 	isb	sy
 8005972:	f3bf 8f4f 	dsb	sy
 8005976:	60bb      	str	r3, [r7, #8]
}
 8005978:	bf00      	nop
 800597a:	bf00      	nop
 800597c:	e7fd      	b.n	800597a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800597e:	4b1e      	ldr	r3, [pc, #120]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	021b      	lsls	r3, r3, #8
 8005984:	4a1c      	ldr	r2, [pc, #112]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005986:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005988:	4b1b      	ldr	r3, [pc, #108]	@ (80059f8 <xPortStartScheduler+0x138>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005990:	4a19      	ldr	r2, [pc, #100]	@ (80059f8 <xPortStartScheduler+0x138>)
 8005992:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800599c:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <xPortStartScheduler+0x13c>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a16      	ldr	r2, [pc, #88]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80059a8:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a13      	ldr	r2, [pc, #76]	@ (80059fc <xPortStartScheduler+0x13c>)
 80059ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80059b4:	f000 f8da 	bl	8005b6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80059b8:	4b11      	ldr	r3, [pc, #68]	@ (8005a00 <xPortStartScheduler+0x140>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80059be:	f000 f8f9 	bl	8005bb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059c2:	4b10      	ldr	r3, [pc, #64]	@ (8005a04 <xPortStartScheduler+0x144>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a04 <xPortStartScheduler+0x144>)
 80059c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80059ce:	f7ff ff63 	bl	8005898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80059d2:	f7ff f83d 	bl	8004a50 <vTaskSwitchContext>
	prvTaskExitError();
 80059d6:	f7ff ff1b 	bl	8005810 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	e000ed00 	.word	0xe000ed00
 80059e8:	410fc271 	.word	0x410fc271
 80059ec:	410fc270 	.word	0x410fc270
 80059f0:	e000e400 	.word	0xe000e400
 80059f4:	20000e60 	.word	0x20000e60
 80059f8:	20000e64 	.word	0x20000e64
 80059fc:	e000ed20 	.word	0xe000ed20
 8005a00:	2000000c 	.word	0x2000000c
 8005a04:	e000ef34 	.word	0xe000ef34

08005a08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
	__asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	607b      	str	r3, [r7, #4]
}
 8005a20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005a22:	4b10      	ldr	r3, [pc, #64]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3301      	adds	r3, #1
 8005a28:	4a0e      	ldr	r2, [pc, #56]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <vPortEnterCritical+0x5c>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d110      	bne.n	8005a56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a34:	4b0c      	ldr	r3, [pc, #48]	@ (8005a68 <vPortEnterCritical+0x60>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d00b      	beq.n	8005a56 <vPortEnterCritical+0x4e>
	__asm volatile
 8005a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a42:	f383 8811 	msr	BASEPRI, r3
 8005a46:	f3bf 8f6f 	isb	sy
 8005a4a:	f3bf 8f4f 	dsb	sy
 8005a4e:	603b      	str	r3, [r7, #0]
}
 8005a50:	bf00      	nop
 8005a52:	bf00      	nop
 8005a54:	e7fd      	b.n	8005a52 <vPortEnterCritical+0x4a>
	}
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	2000000c 	.word	0x2000000c
 8005a68:	e000ed04 	.word	0xe000ed04

08005a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005a72:	4b12      	ldr	r3, [pc, #72]	@ (8005abc <vPortExitCritical+0x50>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <vPortExitCritical+0x26>
	__asm volatile
 8005a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a7e:	f383 8811 	msr	BASEPRI, r3
 8005a82:	f3bf 8f6f 	isb	sy
 8005a86:	f3bf 8f4f 	dsb	sy
 8005a8a:	607b      	str	r3, [r7, #4]
}
 8005a8c:	bf00      	nop
 8005a8e:	bf00      	nop
 8005a90:	e7fd      	b.n	8005a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005a92:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <vPortExitCritical+0x50>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3b01      	subs	r3, #1
 8005a98:	4a08      	ldr	r2, [pc, #32]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005a9c:	4b07      	ldr	r3, [pc, #28]	@ (8005abc <vPortExitCritical+0x50>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <vPortExitCritical+0x44>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	f383 8811 	msr	BASEPRI, r3
}
 8005aae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ab0:	bf00      	nop
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	2000000c 	.word	0x2000000c

08005ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ac0:	f3ef 8009 	mrs	r0, PSP
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	4b15      	ldr	r3, [pc, #84]	@ (8005b20 <pxCurrentTCBConst>)
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	f01e 0f10 	tst.w	lr, #16
 8005ad0:	bf08      	it	eq
 8005ad2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ad6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ada:	6010      	str	r0, [r2, #0]
 8005adc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ae0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005ae4:	f380 8811 	msr	BASEPRI, r0
 8005ae8:	f3bf 8f4f 	dsb	sy
 8005aec:	f3bf 8f6f 	isb	sy
 8005af0:	f7fe ffae 	bl	8004a50 <vTaskSwitchContext>
 8005af4:	f04f 0000 	mov.w	r0, #0
 8005af8:	f380 8811 	msr	BASEPRI, r0
 8005afc:	bc09      	pop	{r0, r3}
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	6808      	ldr	r0, [r1, #0]
 8005b02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b06:	f01e 0f10 	tst.w	lr, #16
 8005b0a:	bf08      	it	eq
 8005b0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b10:	f380 8809 	msr	PSP, r0
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	4770      	bx	lr
 8005b1a:	bf00      	nop
 8005b1c:	f3af 8000 	nop.w

08005b20 <pxCurrentTCBConst>:
 8005b20:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005b24:	bf00      	nop
 8005b26:	bf00      	nop

08005b28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	607b      	str	r3, [r7, #4]
}
 8005b40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005b42:	f7fe fecb 	bl	80048dc <xTaskIncrementTick>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d003      	beq.n	8005b54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b4c:	4b06      	ldr	r3, [pc, #24]	@ (8005b68 <xPortSysTickHandler+0x40>)
 8005b4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	2300      	movs	r3, #0
 8005b56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	f383 8811 	msr	BASEPRI, r3
}
 8005b5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005b60:	bf00      	nop
 8005b62:	3708      	adds	r7, #8
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b76:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <vPortSetupTimerInterrupt+0x38>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba8 <vPortSetupTimerInterrupt+0x3c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a0a      	ldr	r2, [pc, #40]	@ (8005bac <vPortSetupTimerInterrupt+0x40>)
 8005b82:	fba2 2303 	umull	r2, r3, r2, r3
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	4a09      	ldr	r2, [pc, #36]	@ (8005bb0 <vPortSetupTimerInterrupt+0x44>)
 8005b8a:	3b01      	subs	r3, #1
 8005b8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005b8e:	4b04      	ldr	r3, [pc, #16]	@ (8005ba0 <vPortSetupTimerInterrupt+0x34>)
 8005b90:	2207      	movs	r2, #7
 8005b92:	601a      	str	r2, [r3, #0]
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000e010 	.word	0xe000e010
 8005ba4:	e000e018 	.word	0xe000e018
 8005ba8:	20000000 	.word	0x20000000
 8005bac:	10624dd3 	.word	0x10624dd3
 8005bb0:	e000e014 	.word	0xe000e014

08005bb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005bb4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005bc4 <vPortEnableVFP+0x10>
 8005bb8:	6801      	ldr	r1, [r0, #0]
 8005bba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bbe:	6001      	str	r1, [r0, #0]
 8005bc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005bc2:	bf00      	nop
 8005bc4:	e000ed88 	.word	0xe000ed88

08005bc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005bce:	f3ef 8305 	mrs	r3, IPSR
 8005bd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b0f      	cmp	r3, #15
 8005bd8:	d915      	bls.n	8005c06 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bda:	4a18      	ldr	r2, [pc, #96]	@ (8005c3c <vPortValidateInterruptPriority+0x74>)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4413      	add	r3, r2
 8005be0:	781b      	ldrb	r3, [r3, #0]
 8005be2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005be4:	4b16      	ldr	r3, [pc, #88]	@ (8005c40 <vPortValidateInterruptPriority+0x78>)
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	7afa      	ldrb	r2, [r7, #11]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d20b      	bcs.n	8005c06 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
}
 8005c00:	bf00      	nop
 8005c02:	bf00      	nop
 8005c04:	e7fd      	b.n	8005c02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c06:	4b0f      	ldr	r3, [pc, #60]	@ (8005c44 <vPortValidateInterruptPriority+0x7c>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <vPortValidateInterruptPriority+0x80>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d90b      	bls.n	8005c2e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c1a:	f383 8811 	msr	BASEPRI, r3
 8005c1e:	f3bf 8f6f 	isb	sy
 8005c22:	f3bf 8f4f 	dsb	sy
 8005c26:	603b      	str	r3, [r7, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	bf00      	nop
 8005c2c:	e7fd      	b.n	8005c2a <vPortValidateInterruptPriority+0x62>
	}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	e000e3f0 	.word	0xe000e3f0
 8005c40:	20000e60 	.word	0x20000e60
 8005c44:	e000ed0c 	.word	0xe000ed0c
 8005c48:	20000e64 	.word	0x20000e64

08005c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b08a      	sub	sp, #40	@ 0x28
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005c54:	2300      	movs	r3, #0
 8005c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005c58:	f7fe fd84 	bl	8004764 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005c5c:	4b5c      	ldr	r3, [pc, #368]	@ (8005dd0 <pvPortMalloc+0x184>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005c64:	f000 f924 	bl	8005eb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c68:	4b5a      	ldr	r3, [pc, #360]	@ (8005dd4 <pvPortMalloc+0x188>)
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4013      	ands	r3, r2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8095 	bne.w	8005da0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01e      	beq.n	8005cba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005c7c:	2208      	movs	r2, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	4413      	add	r3, r2
 8005c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d015      	beq.n	8005cba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f023 0307 	bic.w	r3, r3, #7
 8005c94:	3308      	adds	r3, #8
 8005c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f003 0307 	and.w	r3, r3, #7
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d00b      	beq.n	8005cba <pvPortMalloc+0x6e>
	__asm volatile
 8005ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca6:	f383 8811 	msr	BASEPRI, r3
 8005caa:	f3bf 8f6f 	isb	sy
 8005cae:	f3bf 8f4f 	dsb	sy
 8005cb2:	617b      	str	r3, [r7, #20]
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	e7fd      	b.n	8005cb6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d06f      	beq.n	8005da0 <pvPortMalloc+0x154>
 8005cc0:	4b45      	ldr	r3, [pc, #276]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d86a      	bhi.n	8005da0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005cca:	4b44      	ldr	r3, [pc, #272]	@ (8005ddc <pvPortMalloc+0x190>)
 8005ccc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005cce:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <pvPortMalloc+0x190>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005cd4:	e004      	b.n	8005ce0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d903      	bls.n	8005cf2 <pvPortMalloc+0xa6>
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1f1      	bne.n	8005cd6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005cf2:	4b37      	ldr	r3, [pc, #220]	@ (8005dd0 <pvPortMalloc+0x184>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d051      	beq.n	8005da0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2208      	movs	r2, #8
 8005d02:	4413      	add	r3, r2
 8005d04:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	1ad2      	subs	r2, r2, r3
 8005d16:	2308      	movs	r3, #8
 8005d18:	005b      	lsls	r3, r3, #1
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d920      	bls.n	8005d60 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4413      	add	r3, r2
 8005d24:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00b      	beq.n	8005d48 <pvPortMalloc+0xfc>
	__asm volatile
 8005d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d34:	f383 8811 	msr	BASEPRI, r3
 8005d38:	f3bf 8f6f 	isb	sy
 8005d3c:	f3bf 8f4f 	dsb	sy
 8005d40:	613b      	str	r3, [r7, #16]
}
 8005d42:	bf00      	nop
 8005d44:	bf00      	nop
 8005d46:	e7fd      	b.n	8005d44 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d4a:	685a      	ldr	r2, [r3, #4]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	1ad2      	subs	r2, r2, r3
 8005d50:	69bb      	ldr	r3, [r7, #24]
 8005d52:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005d5a:	69b8      	ldr	r0, [r7, #24]
 8005d5c:	f000 f90a 	bl	8005f74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005d60:	4b1d      	ldr	r3, [pc, #116]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d6c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005d6e:	4b1a      	ldr	r3, [pc, #104]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	4b1b      	ldr	r3, [pc, #108]	@ (8005de0 <pvPortMalloc+0x194>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d203      	bcs.n	8005d82 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005d7a:	4b17      	ldr	r3, [pc, #92]	@ (8005dd8 <pvPortMalloc+0x18c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a18      	ldr	r2, [pc, #96]	@ (8005de0 <pvPortMalloc+0x194>)
 8005d80:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	4b13      	ldr	r3, [pc, #76]	@ (8005dd4 <pvPortMalloc+0x188>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005d96:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <pvPortMalloc+0x198>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	4a11      	ldr	r2, [pc, #68]	@ (8005de4 <pvPortMalloc+0x198>)
 8005d9e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005da0:	f7fe fcee 	bl	8004780 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f003 0307 	and.w	r3, r3, #7
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <pvPortMalloc+0x17a>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60fb      	str	r3, [r7, #12]
}
 8005dc0:	bf00      	nop
 8005dc2:	bf00      	nop
 8005dc4:	e7fd      	b.n	8005dc2 <pvPortMalloc+0x176>
	return pvReturn;
 8005dc6:	69fb      	ldr	r3, [r7, #28]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	20001a28 	.word	0x20001a28
 8005dd4:	20001a3c 	.word	0x20001a3c
 8005dd8:	20001a2c 	.word	0x20001a2c
 8005ddc:	20001a20 	.word	0x20001a20
 8005de0:	20001a30 	.word	0x20001a30
 8005de4:	20001a34 	.word	0x20001a34

08005de8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d04f      	beq.n	8005e9a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005dfa:	2308      	movs	r3, #8
 8005dfc:	425b      	negs	r3, r3
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	4413      	add	r3, r2
 8005e02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4b25      	ldr	r3, [pc, #148]	@ (8005ea4 <vPortFree+0xbc>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10b      	bne.n	8005e2e <vPortFree+0x46>
	__asm volatile
 8005e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	60fb      	str	r3, [r7, #12]
}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	e7fd      	b.n	8005e2a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <vPortFree+0x66>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	60bb      	str	r3, [r7, #8]
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	e7fd      	b.n	8005e4a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	4b14      	ldr	r3, [pc, #80]	@ (8005ea4 <vPortFree+0xbc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4013      	ands	r3, r2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d01e      	beq.n	8005e9a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11a      	bne.n	8005e9a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	4b0e      	ldr	r3, [pc, #56]	@ (8005ea4 <vPortFree+0xbc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	43db      	mvns	r3, r3
 8005e6e:	401a      	ands	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005e74:	f7fe fc76 	bl	8004764 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005ea8 <vPortFree+0xc0>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4413      	add	r3, r2
 8005e82:	4a09      	ldr	r2, [pc, #36]	@ (8005ea8 <vPortFree+0xc0>)
 8005e84:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005e86:	6938      	ldr	r0, [r7, #16]
 8005e88:	f000 f874 	bl	8005f74 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vPortFree+0xc4>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3301      	adds	r3, #1
 8005e92:	4a06      	ldr	r2, [pc, #24]	@ (8005eac <vPortFree+0xc4>)
 8005e94:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005e96:	f7fe fc73 	bl	8004780 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005e9a:	bf00      	nop
 8005e9c:	3718      	adds	r7, #24
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
 8005ea2:	bf00      	nop
 8005ea4:	20001a3c 	.word	0x20001a3c
 8005ea8:	20001a2c 	.word	0x20001a2c
 8005eac:	20001a38 	.word	0x20001a38

08005eb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005eb6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005eba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005ebc:	4b27      	ldr	r3, [pc, #156]	@ (8005f5c <prvHeapInit+0xac>)
 8005ebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f003 0307 	and.w	r3, r3, #7
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00c      	beq.n	8005ee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3307      	adds	r3, #7
 8005ece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f023 0307 	bic.w	r3, r3, #7
 8005ed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	4a1f      	ldr	r2, [pc, #124]	@ (8005f5c <prvHeapInit+0xac>)
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f60 <prvHeapInit+0xb0>)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005eee:	4b1c      	ldr	r3, [pc, #112]	@ (8005f60 <prvHeapInit+0xb0>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005efc:	2208      	movs	r2, #8
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	1a9b      	subs	r3, r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	4a15      	ldr	r2, [pc, #84]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f12:	4b14      	ldr	r3, [pc, #80]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f1a:	4b12      	ldr	r3, [pc, #72]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	1ad2      	subs	r2, r2, r3
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f30:	4b0c      	ldr	r3, [pc, #48]	@ (8005f64 <prvHeapInit+0xb4>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005f68 <prvHeapInit+0xb8>)
 8005f3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	4a09      	ldr	r2, [pc, #36]	@ (8005f6c <prvHeapInit+0xbc>)
 8005f46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f48:	4b09      	ldr	r3, [pc, #36]	@ (8005f70 <prvHeapInit+0xc0>)
 8005f4a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f4e:	601a      	str	r2, [r3, #0]
}
 8005f50:	bf00      	nop
 8005f52:	3714      	adds	r7, #20
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	20000e68 	.word	0x20000e68
 8005f60:	20001a20 	.word	0x20001a20
 8005f64:	20001a28 	.word	0x20001a28
 8005f68:	20001a30 	.word	0x20001a30
 8005f6c:	20001a2c 	.word	0x20001a2c
 8005f70:	20001a3c 	.word	0x20001a3c

08005f74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005f7c:	4b28      	ldr	r3, [pc, #160]	@ (8006020 <prvInsertBlockIntoFreeList+0xac>)
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e002      	b.n	8005f88 <prvInsertBlockIntoFreeList+0x14>
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d8f7      	bhi.n	8005f82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	68ba      	ldr	r2, [r7, #8]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d108      	bne.n	8005fb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685a      	ldr	r2, [r3, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	441a      	add	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	441a      	add	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d118      	bne.n	8005ffc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681a      	ldr	r2, [r3, #0]
 8005fce:	4b15      	ldr	r3, [pc, #84]	@ (8006024 <prvInsertBlockIntoFreeList+0xb0>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d00d      	beq.n	8005ff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685a      	ldr	r2, [r3, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	441a      	add	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	e008      	b.n	8006004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005ff2:	4b0c      	ldr	r3, [pc, #48]	@ (8006024 <prvInsertBlockIntoFreeList+0xb0>)
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	e003      	b.n	8006004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	429a      	cmp	r2, r3
 800600a:	d002      	beq.n	8006012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	20001a20 	.word	0x20001a20
 8006024:	20001a28 	.word	0x20001a28

08006028 <memset>:
 8006028:	4402      	add	r2, r0
 800602a:	4603      	mov	r3, r0
 800602c:	4293      	cmp	r3, r2
 800602e:	d100      	bne.n	8006032 <memset+0xa>
 8006030:	4770      	bx	lr
 8006032:	f803 1b01 	strb.w	r1, [r3], #1
 8006036:	e7f9      	b.n	800602c <memset+0x4>

08006038 <__libc_init_array>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4d0d      	ldr	r5, [pc, #52]	@ (8006070 <__libc_init_array+0x38>)
 800603c:	4c0d      	ldr	r4, [pc, #52]	@ (8006074 <__libc_init_array+0x3c>)
 800603e:	1b64      	subs	r4, r4, r5
 8006040:	10a4      	asrs	r4, r4, #2
 8006042:	2600      	movs	r6, #0
 8006044:	42a6      	cmp	r6, r4
 8006046:	d109      	bne.n	800605c <__libc_init_array+0x24>
 8006048:	4d0b      	ldr	r5, [pc, #44]	@ (8006078 <__libc_init_array+0x40>)
 800604a:	4c0c      	ldr	r4, [pc, #48]	@ (800607c <__libc_init_array+0x44>)
 800604c:	f000 f826 	bl	800609c <_init>
 8006050:	1b64      	subs	r4, r4, r5
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	2600      	movs	r6, #0
 8006056:	42a6      	cmp	r6, r4
 8006058:	d105      	bne.n	8006066 <__libc_init_array+0x2e>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006060:	4798      	blx	r3
 8006062:	3601      	adds	r6, #1
 8006064:	e7ee      	b.n	8006044 <__libc_init_array+0xc>
 8006066:	f855 3b04 	ldr.w	r3, [r5], #4
 800606a:	4798      	blx	r3
 800606c:	3601      	adds	r6, #1
 800606e:	e7f2      	b.n	8006056 <__libc_init_array+0x1e>
 8006070:	08006144 	.word	0x08006144
 8006074:	08006144 	.word	0x08006144
 8006078:	08006144 	.word	0x08006144
 800607c:	08006148 	.word	0x08006148

08006080 <memcpy>:
 8006080:	440a      	add	r2, r1
 8006082:	4291      	cmp	r1, r2
 8006084:	f100 33ff 	add.w	r3, r0, #4294967295
 8006088:	d100      	bne.n	800608c <memcpy+0xc>
 800608a:	4770      	bx	lr
 800608c:	b510      	push	{r4, lr}
 800608e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006096:	4291      	cmp	r1, r2
 8006098:	d1f9      	bne.n	800608e <memcpy+0xe>
 800609a:	bd10      	pop	{r4, pc}

0800609c <_init>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	bf00      	nop
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr

080060a8 <_fini>:
 80060a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060aa:	bf00      	nop
 80060ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ae:	bc08      	pop	{r3}
 80060b0:	469e      	mov	lr, r3
 80060b2:	4770      	bx	lr
